
Glove_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0800462c  0800462c  0000562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800542c  0800542c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800542c  0800542c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800542c  0800542c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005430  08005430  00006430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005434  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  20000010  08005444  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  08005444  00007470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5ef  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a3  00000000  00000000  00011628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  000139d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084b  00000000  00000000  000144c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001835a  00000000  00000000  00014d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebcd  00000000  00000000  0002d06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887ba  00000000  00000000  0003bc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c43f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd8  00000000  00000000  000c4438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c7110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004614 	.word	0x08004614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004614 	.word	0x08004614

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_fmul>:
 800098c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000990:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000994:	bf1e      	ittt	ne
 8000996:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800099a:	ea92 0f0c 	teqne	r2, ip
 800099e:	ea93 0f0c 	teqne	r3, ip
 80009a2:	d06f      	beq.n	8000a84 <__aeabi_fmul+0xf8>
 80009a4:	441a      	add	r2, r3
 80009a6:	ea80 0c01 	eor.w	ip, r0, r1
 80009aa:	0240      	lsls	r0, r0, #9
 80009ac:	bf18      	it	ne
 80009ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009b2:	d01e      	beq.n	80009f2 <__aeabi_fmul+0x66>
 80009b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009c0:	fba0 3101 	umull	r3, r1, r0, r1
 80009c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009cc:	bf3e      	ittt	cc
 80009ce:	0049      	lslcc	r1, r1, #1
 80009d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d4:	005b      	lslcc	r3, r3, #1
 80009d6:	ea40 0001 	orr.w	r0, r0, r1
 80009da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009de:	2afd      	cmp	r2, #253	@ 0xfd
 80009e0:	d81d      	bhi.n	8000a1e <__aeabi_fmul+0x92>
 80009e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	4770      	bx	lr
 80009f2:	f090 0f00 	teq	r0, #0
 80009f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009fa:	bf08      	it	eq
 80009fc:	0249      	lsleq	r1, r1, #9
 80009fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a02:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a06:	3a7f      	subs	r2, #127	@ 0x7f
 8000a08:	bfc2      	ittt	gt
 8000a0a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a12:	4770      	bxgt	lr
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	dc5d      	bgt.n	8000adc <__aeabi_fmul+0x150>
 8000a20:	f112 0f19 	cmn.w	r2, #25
 8000a24:	bfdc      	itt	le
 8000a26:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a2a:	4770      	bxle	lr
 8000a2c:	f1c2 0200 	rsb	r2, r2, #0
 8000a30:	0041      	lsls	r1, r0, #1
 8000a32:	fa21 f102 	lsr.w	r1, r1, r2
 8000a36:	f1c2 0220 	rsb	r2, r2, #32
 8000a3a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a42:	f140 0000 	adc.w	r0, r0, #0
 8000a46:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a4a:	bf08      	it	eq
 8000a4c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a50:	4770      	bx	lr
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a5a:	bf02      	ittt	eq
 8000a5c:	0040      	lsleq	r0, r0, #1
 8000a5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a62:	3a01      	subeq	r2, #1
 8000a64:	d0f9      	beq.n	8000a5a <__aeabi_fmul+0xce>
 8000a66:	ea40 000c 	orr.w	r0, r0, ip
 8000a6a:	f093 0f00 	teq	r3, #0
 8000a6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a72:	bf02      	ittt	eq
 8000a74:	0049      	lsleq	r1, r1, #1
 8000a76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a7a:	3b01      	subeq	r3, #1
 8000a7c:	d0f9      	beq.n	8000a72 <__aeabi_fmul+0xe6>
 8000a7e:	ea41 010c 	orr.w	r1, r1, ip
 8000a82:	e78f      	b.n	80009a4 <__aeabi_fmul+0x18>
 8000a84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a88:	ea92 0f0c 	teq	r2, ip
 8000a8c:	bf18      	it	ne
 8000a8e:	ea93 0f0c 	teqne	r3, ip
 8000a92:	d00a      	beq.n	8000aaa <__aeabi_fmul+0x11e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9e:	d1d8      	bne.n	8000a52 <__aeabi_fmul+0xc6>
 8000aa0:	ea80 0001 	eor.w	r0, r0, r1
 8000aa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa8:	4770      	bx	lr
 8000aaa:	f090 0f00 	teq	r0, #0
 8000aae:	bf17      	itett	ne
 8000ab0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab4:	4608      	moveq	r0, r1
 8000ab6:	f091 0f00 	teqne	r1, #0
 8000aba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000abe:	d014      	beq.n	8000aea <__aeabi_fmul+0x15e>
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	d101      	bne.n	8000aca <__aeabi_fmul+0x13e>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	d10f      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000aca:	ea93 0f0c 	teq	r3, ip
 8000ace:	d103      	bne.n	8000ad8 <__aeabi_fmul+0x14c>
 8000ad0:	024b      	lsls	r3, r1, #9
 8000ad2:	bf18      	it	ne
 8000ad4:	4608      	movne	r0, r1
 8000ad6:	d108      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000ad8:	ea80 0001 	eor.w	r0, r0, r1
 8000adc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_fdiv>:
 8000af4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000afc:	bf1e      	ittt	ne
 8000afe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b02:	ea92 0f0c 	teqne	r2, ip
 8000b06:	ea93 0f0c 	teqne	r3, ip
 8000b0a:	d069      	beq.n	8000be0 <__aeabi_fdiv+0xec>
 8000b0c:	eba2 0203 	sub.w	r2, r2, r3
 8000b10:	ea80 0c01 	eor.w	ip, r0, r1
 8000b14:	0249      	lsls	r1, r1, #9
 8000b16:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b1a:	d037      	beq.n	8000b8c <__aeabi_fdiv+0x98>
 8000b1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b20:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b24:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b28:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf38      	it	cc
 8000b30:	005b      	lslcc	r3, r3, #1
 8000b32:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b36:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	bf24      	itt	cs
 8000b3e:	1a5b      	subcs	r3, r3, r1
 8000b40:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b44:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b48:	bf24      	itt	cs
 8000b4a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b52:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b56:	bf24      	itt	cs
 8000b58:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b60:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b64:	bf24      	itt	cs
 8000b66:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b6a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	bf18      	it	ne
 8000b72:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b76:	d1e0      	bne.n	8000b3a <__aeabi_fdiv+0x46>
 8000b78:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7a:	f63f af50 	bhi.w	8000a1e <__aeabi_fmul+0x92>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b90:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b94:	327f      	adds	r2, #127	@ 0x7f
 8000b96:	bfc2      	ittt	gt
 8000b98:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b9c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ba0:	4770      	bxgt	lr
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	3a01      	subs	r2, #1
 8000bac:	e737      	b.n	8000a1e <__aeabi_fmul+0x92>
 8000bae:	f092 0f00 	teq	r2, #0
 8000bb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb6:	bf02      	ittt	eq
 8000bb8:	0040      	lsleq	r0, r0, #1
 8000bba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bbe:	3a01      	subeq	r2, #1
 8000bc0:	d0f9      	beq.n	8000bb6 <__aeabi_fdiv+0xc2>
 8000bc2:	ea40 000c 	orr.w	r0, r0, ip
 8000bc6:	f093 0f00 	teq	r3, #0
 8000bca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bce:	bf02      	ittt	eq
 8000bd0:	0049      	lsleq	r1, r1, #1
 8000bd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd6:	3b01      	subeq	r3, #1
 8000bd8:	d0f9      	beq.n	8000bce <__aeabi_fdiv+0xda>
 8000bda:	ea41 010c 	orr.w	r1, r1, ip
 8000bde:	e795      	b.n	8000b0c <__aeabi_fdiv+0x18>
 8000be0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be4:	ea92 0f0c 	teq	r2, ip
 8000be8:	d108      	bne.n	8000bfc <__aeabi_fdiv+0x108>
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	f47f af7d 	bne.w	8000aea <__aeabi_fmul+0x15e>
 8000bf0:	ea93 0f0c 	teq	r3, ip
 8000bf4:	f47f af70 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	e776      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	d104      	bne.n	8000c0c <__aeabi_fdiv+0x118>
 8000c02:	024b      	lsls	r3, r1, #9
 8000c04:	f43f af4c 	beq.w	8000aa0 <__aeabi_fmul+0x114>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c0c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c10:	bf18      	it	ne
 8000c12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c16:	d1ca      	bne.n	8000bae <__aeabi_fdiv+0xba>
 8000c18:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c1c:	f47f af5c 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000c20:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c24:	f47f af3c 	bne.w	8000aa0 <__aeabi_fmul+0x114>
 8000c28:	e75f      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c2a:	bf00      	nop

08000c2c <__gesf2>:
 8000c2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000c30:	e006      	b.n	8000c40 <__cmpsf2+0x4>
 8000c32:	bf00      	nop

08000c34 <__lesf2>:
 8000c34:	f04f 0c01 	mov.w	ip, #1
 8000c38:	e002      	b.n	8000c40 <__cmpsf2+0x4>
 8000c3a:	bf00      	nop

08000c3c <__cmpsf2>:
 8000c3c:	f04f 0c01 	mov.w	ip, #1
 8000c40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d011      	beq.n	8000c7c <__cmpsf2+0x40>
 8000c58:	b001      	add	sp, #4
 8000c5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c5e:	bf18      	it	ne
 8000c60:	ea90 0f01 	teqne	r0, r1
 8000c64:	bf58      	it	pl
 8000c66:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c6a:	bf88      	it	hi
 8000c6c:	17c8      	asrhi	r0, r1, #31
 8000c6e:	bf38      	it	cc
 8000c70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c74:	bf18      	it	ne
 8000c76:	f040 0001 	orrne.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c80:	d102      	bne.n	8000c88 <__cmpsf2+0x4c>
 8000c82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c86:	d105      	bne.n	8000c94 <__cmpsf2+0x58>
 8000c88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c8c:	d1e4      	bne.n	8000c58 <__cmpsf2+0x1c>
 8000c8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c92:	d0e1      	beq.n	8000c58 <__cmpsf2+0x1c>
 8000c94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_cfrcmple>:
 8000c9c:	4684      	mov	ip, r0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	4661      	mov	r1, ip
 8000ca2:	e7ff      	b.n	8000ca4 <__aeabi_cfcmpeq>

08000ca4 <__aeabi_cfcmpeq>:
 8000ca4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ca6:	f7ff ffc9 	bl	8000c3c <__cmpsf2>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	bf48      	it	mi
 8000cae:	f110 0f00 	cmnmi.w	r0, #0
 8000cb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb4 <__aeabi_fcmpeq>:
 8000cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb8:	f7ff fff4 	bl	8000ca4 <__aeabi_cfcmpeq>
 8000cbc:	bf0c      	ite	eq
 8000cbe:	2001      	moveq	r0, #1
 8000cc0:	2000      	movne	r0, #0
 8000cc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fcmplt>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff ffea 	bl	8000ca4 <__aeabi_cfcmpeq>
 8000cd0:	bf34      	ite	cc
 8000cd2:	2001      	movcc	r0, #1
 8000cd4:	2000      	movcs	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmple>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffe0 	bl	8000ca4 <__aeabi_cfcmpeq>
 8000ce4:	bf94      	ite	ls
 8000ce6:	2001      	movls	r0, #1
 8000ce8:	2000      	movhi	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmpge>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffd2 	bl	8000c9c <__aeabi_cfrcmple>
 8000cf8:	bf94      	ite	ls
 8000cfa:	2001      	movls	r0, #1
 8000cfc:	2000      	movhi	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmpgt>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffc8 	bl	8000c9c <__aeabi_cfrcmple>
 8000d0c:	bf34      	ite	cc
 8000d0e:	2001      	movcc	r0, #1
 8000d10:	2000      	movcs	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4906      	ldr	r1, [pc, #24]	@ (8000d4c <__NVIC_EnableIRQ+0x34>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <USART1_IRQHandler>:
 */
#include "USART_tx.h"
uint8_t data_tx ;

void USART1_IRQHandler()
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	USART1->DR = data_tx ;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <USART1_IRQHandler+0x14>)
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <USART1_IRQHandler+0x18>)
 8000d5a:	605a      	str	r2, [r3, #4]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	2000002c 	.word	0x2000002c
 8000d68:	40013800 	.word	0x40013800

08000d6c <usart_init>:

void usart_init()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
	__disable_irq() ;
	RCC->APB2ENR |= (1<<14)|(1<<2)|(1<<0);
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <usart_init+0x64>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a15      	ldr	r2, [pc, #84]	@ (8000dd0 <usart_init+0x64>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7e:	f043 0305 	orr.w	r3, r3, #5
 8000d82:	6193      	str	r3, [r2, #24]
	GPIOA->CRH = 0x444448B4 ;
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <usart_init+0x68>)
 8000d86:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <usart_init+0x6c>)
 8000d88:	605a      	str	r2, [r3, #4]
	GPIOA->ODR |= (1<<10) ;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <usart_init+0x68>)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	4a11      	ldr	r2, [pc, #68]	@ (8000dd4 <usart_init+0x68>)
 8000d90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d94:	60d3      	str	r3, [r2, #12]

	USART1->CR1 |= (1<<3) ;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <usart_init+0x70>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <usart_init+0x70>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 |= (1<<2) ;

	USART1->BRR = 833 ; // BaudRate 9600
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <usart_init+0x70>)
 8000da4:	f240 3241 	movw	r2, #833	@ 0x341
 8000da8:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= (1<<13) ;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <usart_init+0x70>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <usart_init+0x70>)
 8000db0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000db4:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1<<7) ;  //Enable TXE interrupt
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <usart_init+0x70>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <usart_init+0x70>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc0:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn) ;
 8000dc2:	2025      	movs	r0, #37	@ 0x25
 8000dc4:	f7ff ffa8 	bl	8000d18 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dc8:	b662      	cpsie	i
}
 8000dca:	bf00      	nop
	__enable_irq();
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	444448b4 	.word	0x444448b4
 8000ddc:	40013800 	.word	0x40013800

08000de0 <usart_tx>:


void usart_tx(uint8_t data)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
//	while((USART1->SR & (1<<7)) == 0x00);
	data_tx = data ;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <usart_tx+0x1c>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	7013      	strb	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	2000002c 	.word	0x2000002c

08000e00 <flex_init>:
char direction;
char gear ;
uint8_t channel =0 ;

void flex_init()
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
//	__disable_irq();
	RCC->APB2ENR |= (1<<9) ; // Enable Clock for ADC1.
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <flex_init+0x7c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <flex_init+0x7c>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL = 0x44400000 ; // Configure adc pins as analog input.
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <flex_init+0x80>)
 8000e12:	4a1c      	ldr	r2, [pc, #112]	@ (8000e84 <flex_init+0x84>)
 8000e14:	601a      	str	r2, [r3, #0]
	ADC1->CR2 = 0 ; // Clear the control register.
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <flex_init+0x88>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= (1<<0) ;  // Enable ADC (power on);
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <flex_init+0x88>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <flex_init+0x88>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<2) ; // Start calibration.
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <flex_init+0x88>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4a16      	ldr	r2, [pc, #88]	@ (8000e88 <flex_init+0x88>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6093      	str	r3, [r2, #8]
	while((ADC1->CR2 & (1<<2))) ; //Wait for the calibration to finish.
 8000e34:	bf00      	nop
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <flex_init+0x88>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <flex_init+0x36>
	ADC1->SQR1 |= (0x4<<20) ; // set number of conversions to 1.
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <flex_init+0x88>)
 8000e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <flex_init+0x88>)
 8000e48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 = 0x0 ; // Select channel 0.
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <flex_init+0x88>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	@ 0x34
	ADC1->SQR3 |=(0x0<<0) ; // Select channel 0.
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <flex_init+0x88>)
 8000e56:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <flex_init+0x88>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->CR2 |= (7<<17) ;  // Select SWSTRT as the external trigger.
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <flex_init+0x88>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4a09      	ldr	r2, [pc, #36]	@ (8000e88 <flex_init+0x88>)
 8000e62:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000e66:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<20) ;  // Enable external trigger.
 8000e68:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <flex_init+0x88>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <flex_init+0x88>)
 8000e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e72:	6093      	str	r3, [r2, #8]
//	ADC1->CR1 |= (1<<5) ; // Enable EOC interrupt.
//	NVIC_EnableIRQ(ADC1_IRQn) ;
//	__enable_irq();

}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010800 	.word	0x40010800
 8000e84:	44400000 	.word	0x44400000
 8000e88:	40012400 	.word	0x40012400

08000e8c <get_reading>:

char get_reading()
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return reading ;
 8000e90:	4b02      	ldr	r3, [pc, #8]	@ (8000e9c <get_reading+0x10>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	2000006c 	.word	0x2000006c

08000ea0 <set_fingers_v>:

void set_fingers_v(){
 8000ea0:	b598      	push	{r3, r4, r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	fingers_v[channel] = (ADC1->DR*2.8)/4095.0;// Clear the EOC Flag.
 8000ea4:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <set_fingers_v+0x88>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fa93 	bl	80003d4 <__aeabi_ui2d>
 8000eae:	a31a      	add	r3, pc, #104	@ (adr r3, 8000f18 <set_fingers_v+0x78>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fb08 	bl	80004c8 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	a317      	add	r3, pc, #92	@ (adr r3, 8000f20 <set_fingers_v+0x80>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fc29 	bl	800071c <__aeabi_ddiv>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4917      	ldr	r1, [pc, #92]	@ (8000f2c <set_fingers_v+0x8c>)
 8000ed0:	7809      	ldrb	r1, [r1, #0]
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fd08 	bl	80008ec <__aeabi_d2f>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <set_fingers_v+0x90>)
 8000ee0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if(channel == 4)
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <set_fingers_v+0x8c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d106      	bne.n	8000efa <set_fingers_v+0x5a>
	{
		channel = -1 ;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <set_fingers_v+0x8c>)
 8000eee:	22ff      	movs	r2, #255	@ 0xff
 8000ef0:	701a      	strb	r2, [r3, #0]
		flex_calc();
 8000ef2:	f000 f821 	bl	8000f38 <flex_calc>
		read_hand() ;
 8000ef6:	f000 f895 	bl	8001024 <read_hand>
	}
			channel ++ ;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <set_fingers_v+0x8c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <set_fingers_v+0x8c>)
 8000f04:	701a      	strb	r2, [r3, #0]
			ADC1->SQR3 = channel ;	//ADC2->SQR3 = channel ;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <set_fingers_v+0x8c>)
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <set_fingers_v+0x88>)
 8000f0c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f0e:	bf00      	nop
 8000f10:	bd98      	pop	{r3, r4, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	f3af 8000 	nop.w
 8000f18:	66666666 	.word	0x66666666
 8000f1c:	40066666 	.word	0x40066666
 8000f20:	00000000 	.word	0x00000000
 8000f24:	40affe00 	.word	0x40affe00
 8000f28:	40012400 	.word	0x40012400
 8000f2c:	2000006f 	.word	0x2000006f
 8000f30:	20000030 	.word	0x20000030
 8000f34:	00000000 	.word	0x00000000

08000f38 <flex_calc>:

void flex_calc()
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	uint8_t i ;
	for(i =0 ;i<5;i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	e043      	b.n	8000fcc <flex_calc+0x94>
	{
		fingers_r[i] = (fingers_v[i]*22)/(3.3-fingers_v[i]);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4a28      	ldr	r2, [pc, #160]	@ (8000fe8 <flex_calc+0xb0>)
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	4927      	ldr	r1, [pc, #156]	@ (8000fec <flex_calc+0xb4>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fd1c 	bl	800098c <__aeabi_fmul>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa5e 	bl	8000418 <__aeabi_f2d>
 8000f5c:	4604      	mov	r4, r0
 8000f5e:	460d      	mov	r5, r1
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4a21      	ldr	r2, [pc, #132]	@ (8000fe8 <flex_calc+0xb0>)
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa55 	bl	8000418 <__aeabi_f2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	a11b      	add	r1, pc, #108	@ (adr r1, 8000fe0 <flex_calc+0xa8>)
 8000f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f78:	f7ff f8ee 	bl	8000158 <__aeabi_dsub>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4620      	mov	r0, r4
 8000f82:	4629      	mov	r1, r5
 8000f84:	f7ff fbca 	bl	800071c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	79fc      	ldrb	r4, [r7, #7]
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fcab 	bl	80008ec <__aeabi_d2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a15      	ldr	r2, [pc, #84]	@ (8000ff0 <flex_calc+0xb8>)
 8000f9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		fingers_position[i] = (fingers_r[i]>105)?(1):(0) ;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	@ (8000ff0 <flex_calc+0xb8>)
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	4913      	ldr	r1, [pc, #76]	@ (8000ff4 <flex_calc+0xbc>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff feab 	bl	8000d04 <__aeabi_fcmpgt>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <flex_calc+0x82>
 8000fb4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fb8:	e001      	b.n	8000fbe <flex_calc+0x86>
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <flex_calc+0xc0>)
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i =0 ;i<5;i++)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d9b8      	bls.n	8000f44 <flex_calc+0xc>
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdb0      	pop	{r4, r5, r7, pc}
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	66666666 	.word	0x66666666
 8000fe4:	400a6666 	.word	0x400a6666
 8000fe8:	20000030 	.word	0x20000030
 8000fec:	41b00000 	.word	0x41b00000
 8000ff0:	20000044 	.word	0x20000044
 8000ff4:	42d20000 	.word	0x42d20000
 8000ff8:	20000058 	.word	0x20000058

08000ffc <get_direction>:
char get_direction()
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	return direction ;
 8001000:	4b02      	ldr	r3, [pc, #8]	@ (800100c <get_direction+0x10>)
 8001002:	781b      	ldrb	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	2000006d 	.word	0x2000006d

08001010 <get_gear>:

char get_gear()
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	return gear ;
 8001014:	4b02      	ldr	r3, [pc, #8]	@ (8001020 <get_gear+0x10>)
 8001016:	781b      	ldrb	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	2000006e 	.word	0x2000006e

08001024 <read_hand>:
void read_hand()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	int speed = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
	if(fingers_r[0]>0 && fingers_r[0]<=88)
 800102e:	4b5e      	ldr	r3, [pc, #376]	@ (80011a8 <read_hand+0x184>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe64 	bl	8000d04 <__aeabi_fcmpgt>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d012      	beq.n	8001068 <read_hand+0x44>
 8001042:	4b59      	ldr	r3, [pc, #356]	@ (80011a8 <read_hand+0x184>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4959      	ldr	r1, [pc, #356]	@ (80011ac <read_hand+0x188>)
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fe47 	bl	8000cdc <__aeabi_fcmple>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d009      	beq.n	8001068 <read_hand+0x44>
		{
			reading = '0' ;
 8001054:	4b56      	ldr	r3, [pc, #344]	@ (80011b0 <read_hand+0x18c>)
 8001056:	2230      	movs	r2, #48	@ 0x30
 8001058:	701a      	strb	r2, [r3, #0]
			direction = 'S' ;
 800105a:	4b56      	ldr	r3, [pc, #344]	@ (80011b4 <read_hand+0x190>)
 800105c:	2253      	movs	r2, #83	@ 0x53
 800105e:	701a      	strb	r2, [r3, #0]
			gear = 0 ;
 8001060:	4b55      	ldr	r3, [pc, #340]	@ (80011b8 <read_hand+0x194>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
			return ;
 8001066:	e09c      	b.n	80011a2 <read_hand+0x17e>
		}
		else if(fingers_r[0] >88 && fingers_r[0]<=95)
 8001068:	4b4f      	ldr	r3, [pc, #316]	@ (80011a8 <read_hand+0x184>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	494f      	ldr	r1, [pc, #316]	@ (80011ac <read_hand+0x188>)
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe48 	bl	8000d04 <__aeabi_fcmpgt>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00e      	beq.n	8001098 <read_hand+0x74>
 800107a:	4b4b      	ldr	r3, [pc, #300]	@ (80011a8 <read_hand+0x184>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	494f      	ldr	r1, [pc, #316]	@ (80011bc <read_hand+0x198>)
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe2b 	bl	8000cdc <__aeabi_fcmple>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <read_hand+0x74>
		{
			speed = 0 ;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
			gear = 1;
 8001090:	4b49      	ldr	r3, [pc, #292]	@ (80011b8 <read_hand+0x194>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e02e      	b.n	80010f6 <read_hand+0xd2>
		}
		else if(fingers_r[0] >95 && fingers_r[0]<=100)
 8001098:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <read_hand+0x184>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4947      	ldr	r1, [pc, #284]	@ (80011bc <read_hand+0x198>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fe30 	bl	8000d04 <__aeabi_fcmpgt>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00e      	beq.n	80010c8 <read_hand+0xa4>
 80010aa:	4b3f      	ldr	r3, [pc, #252]	@ (80011a8 <read_hand+0x184>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4944      	ldr	r1, [pc, #272]	@ (80011c0 <read_hand+0x19c>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe13 	bl	8000cdc <__aeabi_fcmple>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <read_hand+0xa4>
		{
			speed = 1 ;
 80010bc:	2301      	movs	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
			gear = 2 ;
 80010c0:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <read_hand+0x194>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e016      	b.n	80010f6 <read_hand+0xd2>
		}
		else if(fingers_r[0] >100 && fingers_r[0]<=110)
 80010c8:	4b37      	ldr	r3, [pc, #220]	@ (80011a8 <read_hand+0x184>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	493c      	ldr	r1, [pc, #240]	@ (80011c0 <read_hand+0x19c>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe18 	bl	8000d04 <__aeabi_fcmpgt>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00d      	beq.n	80010f6 <read_hand+0xd2>
 80010da:	4b33      	ldr	r3, [pc, #204]	@ (80011a8 <read_hand+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4939      	ldr	r1, [pc, #228]	@ (80011c4 <read_hand+0x1a0>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fdfb 	bl	8000cdc <__aeabi_fcmple>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <read_hand+0xd2>
		{
			speed = 2 ;
 80010ec:	2302      	movs	r3, #2
 80010ee:	607b      	str	r3, [r7, #4]
			gear = 3 ;
 80010f0:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <read_hand+0x194>)
 80010f2:	2203      	movs	r2, #3
 80010f4:	701a      	strb	r2, [r3, #0]
		}

	if(fingers_position[3] == 1)
 80010f6:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <read_hand+0x1a4>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fdd8 	bl	8000cb4 <__aeabi_fcmpeq>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d009      	beq.n	800111e <read_hand+0xfa>
	{
		reading = 'd'+speed ;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	3364      	adds	r3, #100	@ 0x64
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <read_hand+0x18c>)
 8001114:	701a      	strb	r2, [r3, #0]
		direction = 'R' ;
 8001116:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <read_hand+0x190>)
 8001118:	2252      	movs	r2, #82	@ 0x52
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e041      	b.n	80011a2 <read_hand+0x17e>
	}
	else if(fingers_position[4] == 1)
 800111e:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <read_hand+0x1a4>)
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fdc4 	bl	8000cb4 <__aeabi_fcmpeq>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d009      	beq.n	8001146 <read_hand+0x122>
	{
		reading = 'a'+speed ;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3361      	adds	r3, #97	@ 0x61
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <read_hand+0x18c>)
 800113c:	701a      	strb	r2, [r3, #0]
		direction = 'L' ;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <read_hand+0x190>)
 8001140:	224c      	movs	r2, #76	@ 0x4c
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e02d      	b.n	80011a2 <read_hand+0x17e>
	}
	else if(fingers_position[1] == 1)
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <read_hand+0x1a4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fdb0 	bl	8000cb4 <__aeabi_fcmpeq>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <read_hand+0x14a>
	{
		reading = 'w'+speed ;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	3377      	adds	r3, #119	@ 0x77
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <read_hand+0x18c>)
 8001164:	701a      	strb	r2, [r3, #0]
		direction = 'F' ;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <read_hand+0x190>)
 8001168:	2246      	movs	r2, #70	@ 0x46
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e019      	b.n	80011a2 <read_hand+0x17e>
	}
	else if(fingers_position[2] == 1)
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <read_hand+0x1a4>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd9c 	bl	8000cb4 <__aeabi_fcmpeq>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <read_hand+0x172>
	{
			reading = 's'+speed ;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3373      	adds	r3, #115	@ 0x73
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <read_hand+0x18c>)
 800118c:	701a      	strb	r2, [r3, #0]
			direction = 'B' ;
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <read_hand+0x190>)
 8001190:	2242      	movs	r2, #66	@ 0x42
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e005      	b.n	80011a2 <read_hand+0x17e>
	}
	else
	{
		reading = '0' ;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <read_hand+0x18c>)
 8001198:	2230      	movs	r2, #48	@ 0x30
 800119a:	701a      	strb	r2, [r3, #0]
		direction = 'S' ;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <read_hand+0x190>)
 800119e:	2253      	movs	r2, #83	@ 0x53
 80011a0:	701a      	strb	r2, [r3, #0]
	}
}
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000044 	.word	0x20000044
 80011ac:	42b00000 	.word	0x42b00000
 80011b0:	2000006c 	.word	0x2000006c
 80011b4:	2000006d 	.word	0x2000006d
 80011b8:	2000006e 	.word	0x2000006e
 80011bc:	42be0000 	.word	0x42be0000
 80011c0:	42c80000 	.word	0x42c80000
 80011c4:	42dc0000 	.word	0x42dc0000
 80011c8:	20000058 	.word	0x20000058

080011cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <vApplicationGetIdleTaskMemory+0x28>)
 80011dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80011e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000070 	.word	0x20000070
 80011f8:	200000c4 	.word	0x200000c4

080011fc <sendData>:




void sendData(void* pvparameters)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	TickType_t  xPeriod = pdMS_TO_TICKS(5);
 8001204:	2305      	movs	r3, #5
 8001206:	60fb      	str	r3, [r7, #12]
	TickType_t  xLastWakeTime = xTaskGetTickCount();
 8001208:	f002 fbc2 	bl	8003990 <xTaskGetTickCount>
 800120c:	4603      	mov	r3, r0
 800120e:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		usart_tx(get_reading()) ;
 8001210:	f7ff fe3c 	bl	8000e8c <get_reading>
 8001214:	4603      	mov	r3, r0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fde2 	bl	8000de0 <usart_tx>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	68f9      	ldr	r1, [r7, #12]
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fa26 	bl	8003674 <vTaskDelayUntil>
		usart_tx(get_reading()) ;
 8001228:	bf00      	nop
 800122a:	e7f1      	b.n	8001210 <sendData+0x14>

0800122c <ADC_Read>:
	}
}
void ADC_Read( void* pvparameters )
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
//
//	TickType_t  xPeriod = pdMS_TO_TICKS(10);
//	TickType_t  xLastWakeTime = xTaskGetTickCount();
	while(1)
	{
		ADC1->CR2 |= (1<<22) ; // Start conversion.
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <ADC_Read+0x34>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a09      	ldr	r2, [pc, #36]	@ (8001260 <ADC_Read+0x34>)
 800123a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800123e:	6093      	str	r3, [r2, #8]
		while(!(ADC1->SR &(1<<1)));
 8001240:	bf00      	nop
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <ADC_Read+0x34>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f9      	beq.n	8001242 <ADC_Read+0x16>
		ADC1->SR &= ~(1<<1) ;// Clear the EOC Flag.
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <ADC_Read+0x34>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a03      	ldr	r2, [pc, #12]	@ (8001260 <ADC_Read+0x34>)
 8001254:	f023 0302 	bic.w	r3, r3, #2
 8001258:	6013      	str	r3, [r2, #0]
		set_fingers_v() ;
 800125a:	f7ff fe21 	bl	8000ea0 <set_fingers_v>
		ADC1->CR2 |= (1<<22) ; // Start conversion.
 800125e:	e7e9      	b.n	8001234 <ADC_Read+0x8>
 8001260:	40012400 	.word	0x40012400

08001264 <update_screen>:

//		vTaskDelayUntil(&xLastWakeTime, xPeriod);
	}
}
void update_screen(void* pvparameters){
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af02      	add	r7, sp, #8
 800126a:	6078      	str	r0, [r7, #4]
#ifdef SSD1306_INCLUDE_FONT_16x24
	TickType_t  xPeriod = pdMS_TO_TICKS(20);
 800126c:	2314      	movs	r3, #20
 800126e:	61fb      	str	r3, [r7, #28]
	TickType_t  xLastWakeTime = xTaskGetTickCount();
 8001270:	f002 fb8e 	bl	8003990 <xTaskGetTickCount>
 8001274:	4603      	mov	r3, r0
 8001276:	60bb      	str	r3, [r7, #8]
	while(1)
	{
	char d = get_direction();
 8001278:	f7ff fec0 	bl	8000ffc <get_direction>
 800127c:	4603      	mov	r3, r0
 800127e:	76fb      	strb	r3, [r7, #27]
	char* direction = (d=='F')?("Forward"):(d == 'B')?("Backward"):(d == 'R')?("Right"):(d == 'L')?("Left"):("Break") ;
 8001280:	7efb      	ldrb	r3, [r7, #27]
 8001282:	2b46      	cmp	r3, #70	@ 0x46
 8001284:	d010      	beq.n	80012a8 <update_screen+0x44>
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	2b42      	cmp	r3, #66	@ 0x42
 800128a:	d00b      	beq.n	80012a4 <update_screen+0x40>
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	2b52      	cmp	r3, #82	@ 0x52
 8001290:	d006      	beq.n	80012a0 <update_screen+0x3c>
 8001292:	7efb      	ldrb	r3, [r7, #27]
 8001294:	2b4c      	cmp	r3, #76	@ 0x4c
 8001296:	d101      	bne.n	800129c <update_screen+0x38>
 8001298:	4b20      	ldr	r3, [pc, #128]	@ (800131c <update_screen+0xb8>)
 800129a:	e006      	b.n	80012aa <update_screen+0x46>
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <update_screen+0xbc>)
 800129e:	e004      	b.n	80012aa <update_screen+0x46>
 80012a0:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <update_screen+0xc0>)
 80012a2:	e002      	b.n	80012aa <update_screen+0x46>
 80012a4:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <update_screen+0xc4>)
 80012a6:	e000      	b.n	80012aa <update_screen+0x46>
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <update_screen+0xc8>)
 80012aa:	617b      	str	r3, [r7, #20]
	char gear = get_gear()  ;
 80012ac:	f7ff feb0 	bl	8001010 <get_gear>
 80012b0:	4603      	mov	r3, r0
 80012b2:	74fb      	strb	r3, [r7, #19]
	char* speed = (gear==0)?("Neutral"):(gear==1)?("Gear 1"):(gear == 2)?("Gear 2"):("Gear 3") ;
 80012b4:	7cfb      	ldrb	r3, [r7, #19]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <update_screen+0x6e>
 80012ba:	7cfb      	ldrb	r3, [r7, #19]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d006      	beq.n	80012ce <update_screen+0x6a>
 80012c0:	7cfb      	ldrb	r3, [r7, #19]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d101      	bne.n	80012ca <update_screen+0x66>
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <update_screen+0xcc>)
 80012c8:	e004      	b.n	80012d4 <update_screen+0x70>
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <update_screen+0xd0>)
 80012cc:	e002      	b.n	80012d4 <update_screen+0x70>
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <update_screen+0xd4>)
 80012d0:	e000      	b.n	80012d4 <update_screen+0x70>
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <update_screen+0xd8>)
 80012d4:	60fb      	str	r3, [r7, #12]

	 ssd1306_Fill(Black);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f99c 	bl	8001614 <ssd1306_Fill>
	 ssd1306_SetCursor(0,10);
 80012dc:	210a      	movs	r1, #10
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fae0 	bl	80018a4 <ssd1306_SetCursor>
	 ssd1306_WriteString(direction,Font_11x18,White);
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <update_screen+0xdc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ec:	6978      	ldr	r0, [r7, #20]
 80012ee:	f000 fab3 	bl	8001858 <ssd1306_WriteString>
	 ssd1306_SetCursor(0,30);
 80012f2:	211e      	movs	r1, #30
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 fad5 	bl	80018a4 <ssd1306_SetCursor>
	 ssd1306_WriteString(speed,Font_11x18,White);
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <update_screen+0xdc>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 faa8 	bl	8001858 <ssd1306_WriteString>
	 ssd1306_UpdateScreen();
 8001308:	f000 f99c 	bl	8001644 <ssd1306_UpdateScreen>
	 vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	69f9      	ldr	r1, [r7, #28]
 8001312:	4618      	mov	r0, r3
 8001314:	f002 f9ae 	bl	8003674 <vTaskDelayUntil>
	{
 8001318:	e7ae      	b.n	8001278 <update_screen+0x14>
 800131a:	bf00      	nop
 800131c:	0800462c 	.word	0x0800462c
 8001320:	08004634 	.word	0x08004634
 8001324:	0800463c 	.word	0x0800463c
 8001328:	08004644 	.word	0x08004644
 800132c:	08004650 	.word	0x08004650
 8001330:	08004658 	.word	0x08004658
 8001334:	08004660 	.word	0x08004660
 8001338:	08004668 	.word	0x08004668
 800133c:	08004670 	.word	0x08004670
 8001340:	080053f4 	.word	0x080053f4

08001344 <main>:
#endif
}


int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af02      	add	r7, sp, #8
  usart_init() ;
 800134a:	f7ff fd0f 	bl	8000d6c <usart_init>
  flex_init();
 800134e:	f7ff fd57 	bl	8000e00 <flex_init>
  HAL_Init();
 8001352:	f000 fbbb 	bl	8001acc <HAL_Init>
  SystemClock_Config();
 8001356:	f000 f835 	bl	80013c4 <SystemClock_Config>
  MX_GPIO_Init();
 800135a:	f000 f89d 	bl	8001498 <MX_GPIO_Init>
  MX_I2C1_Init();
 800135e:	f000 f86d 	bl	800143c <MX_I2C1_Init>
  ssd1306_Init() ;
 8001362:	f000 f8ed 	bl	8001540 <ssd1306_Init>


//
  	xTaskCreate(sendData,"sender",128,NULL,tskIDLE_PRIORITY+3,NULL) ;
 8001366:	2300      	movs	r3, #0
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	2303      	movs	r3, #3
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	490e      	ldr	r1, [pc, #56]	@ (80013ac <main+0x68>)
 8001374:	480e      	ldr	r0, [pc, #56]	@ (80013b0 <main+0x6c>)
 8001376:	f002 f84d 	bl	8003414 <xTaskCreate>
  	xTaskCreate(ADC_Read,"reader",128,NULL,tskIDLE_PRIORITY+1,NULL) ;
 800137a:	2300      	movs	r3, #0
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2301      	movs	r3, #1
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	2280      	movs	r2, #128	@ 0x80
 8001386:	490b      	ldr	r1, [pc, #44]	@ (80013b4 <main+0x70>)
 8001388:	480b      	ldr	r0, [pc, #44]	@ (80013b8 <main+0x74>)
 800138a:	f002 f843 	bl	8003414 <xTaskCreate>
	xTaskCreate(update_screen,"O_led",256,NULL,tskIDLE_PRIORITY+1,NULL) ;
 800138e:	2300      	movs	r3, #0
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2301      	movs	r3, #1
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800139c:	4907      	ldr	r1, [pc, #28]	@ (80013bc <main+0x78>)
 800139e:	4808      	ldr	r0, [pc, #32]	@ (80013c0 <main+0x7c>)
 80013a0:	f002 f838 	bl	8003414 <xTaskCreate>

  	vTaskStartScheduler();
 80013a4:	f002 f9e6 	bl	8003774 <vTaskStartScheduler>

  while (1){}
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <main+0x64>
 80013ac:	08004678 	.word	0x08004678
 80013b0:	080011fd 	.word	0x080011fd
 80013b4:	08004680 	.word	0x08004680
 80013b8:	0800122d 	.word	0x0800122d
 80013bc:	08004688 	.word	0x08004688
 80013c0:	08001265 	.word	0x08001265

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b090      	sub	sp, #64	@ 0x40
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0318 	add.w	r3, r7, #24
 80013ce:	2228      	movs	r2, #40	@ 0x28
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 f8f2 	bl	80045bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ee:	2310      	movs	r3, #16
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fb00 	bl	8002a00 <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001406:	f000 f85d 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140a:	230f      	movs	r3, #15
 800140c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fd6e 	bl	8002f04 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800142e:	f000 f849 	bl	80014c4 <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3740      	adds	r7, #64	@ 0x40
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <MX_I2C1_Init+0x50>)
 8001442:	4a13      	ldr	r2, [pc, #76]	@ (8001490 <MX_I2C1_Init+0x54>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_I2C1_Init+0x50>)
 8001448:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x58>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_I2C1_Init+0x50>)
 800145a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_I2C1_Init+0x50>)
 800147a:	f000 fe15 	bl	80020a8 <HAL_I2C_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001484:	f000 f81e 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200002c4 	.word	0x200002c4
 8001490:	40005400 	.word	0x40005400
 8001494:	00061a80 	.word	0x00061a80

08001498 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_GPIO_Init+0x28>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <MX_GPIO_Init+0x28>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <MX_GPIO_Init+0x28>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000

080014c4 <Error_Handler>:

void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af04      	add	r7, sp, #16
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	2200      	movs	r2, #0
 80014f8:	2178      	movs	r1, #120	@ 0x78
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <ssd1306_WriteCommand+0x2c>)
 80014fc:	f000 ff18 	bl	8002330 <HAL_I2C_Mem_Write>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200002c4 	.word	0x200002c4

0800150c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af04      	add	r7, sp, #16
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	f04f 32ff 	mov.w	r2, #4294967295
 800151e:	9202      	str	r2, [sp, #8]
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	2240      	movs	r2, #64	@ 0x40
 800152a:	2178      	movs	r1, #120	@ 0x78
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <ssd1306_WriteData+0x30>)
 800152e:	f000 feff 	bl	8002330 <HAL_I2C_Mem_Write>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002c4 	.word	0x200002c4

08001540 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001544:	f7ff ffc4 	bl	80014d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	f000 fb21 	bl	8001b90 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f9d4 	bl	80018fc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001554:	2020      	movs	r0, #32
 8001556:	f7ff ffc1 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ffbe 	bl	80014dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001560:	20b0      	movs	r0, #176	@ 0xb0
 8001562:	f7ff ffbb 	bl	80014dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001566:	20c8      	movs	r0, #200	@ 0xc8
 8001568:	f7ff ffb8 	bl	80014dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ffb5 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001572:	2010      	movs	r0, #16
 8001574:	f7ff ffb2 	bl	80014dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001578:	2040      	movs	r0, #64	@ 0x40
 800157a:	f7ff ffaf 	bl	80014dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800157e:	20ff      	movs	r0, #255	@ 0xff
 8001580:	f000 f9a8 	bl	80018d4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001584:	20a1      	movs	r0, #161	@ 0xa1
 8001586:	f7ff ffa9 	bl	80014dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800158a:	20a6      	movs	r0, #166	@ 0xa6
 800158c:	f7ff ffa6 	bl	80014dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001590:	20a8      	movs	r0, #168	@ 0xa8
 8001592:	f7ff ffa3 	bl	80014dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001596:	203f      	movs	r0, #63	@ 0x3f
 8001598:	f7ff ffa0 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800159c:	20a4      	movs	r0, #164	@ 0xa4
 800159e:	f7ff ff9d 	bl	80014dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015a2:	20d3      	movs	r0, #211	@ 0xd3
 80015a4:	f7ff ff9a 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff ff97 	bl	80014dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015ae:	20d5      	movs	r0, #213	@ 0xd5
 80015b0:	f7ff ff94 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015b4:	20f0      	movs	r0, #240	@ 0xf0
 80015b6:	f7ff ff91 	bl	80014dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015ba:	20d9      	movs	r0, #217	@ 0xd9
 80015bc:	f7ff ff8e 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015c0:	2022      	movs	r0, #34	@ 0x22
 80015c2:	f7ff ff8b 	bl	80014dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015c6:	20da      	movs	r0, #218	@ 0xda
 80015c8:	f7ff ff88 	bl	80014dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80015cc:	2012      	movs	r0, #18
 80015ce:	f7ff ff85 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015d2:	20db      	movs	r0, #219	@ 0xdb
 80015d4:	f7ff ff82 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80015d8:	2020      	movs	r0, #32
 80015da:	f7ff ff7f 	bl	80014dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80015de:	208d      	movs	r0, #141	@ 0x8d
 80015e0:	f7ff ff7c 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80015e4:	2014      	movs	r0, #20
 80015e6:	f7ff ff79 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80015ea:	2001      	movs	r0, #1
 80015ec:	f000 f986 	bl	80018fc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f80f 	bl	8001614 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80015f6:	f000 f825 	bl	8001644 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <ssd1306_Init+0xd0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <ssd1306_Init+0xd0>)
 8001602:	2200      	movs	r2, #0
 8001604:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001606:	4b02      	ldr	r3, [pc, #8]	@ (8001610 <ssd1306_Init+0xd0>)
 8001608:	2201      	movs	r2, #1
 800160a:	711a      	strb	r2, [r3, #4]
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000718 	.word	0x20000718

08001614 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <ssd1306_Fill+0x14>
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <ssd1306_Fill+0x16>
 8001628:	23ff      	movs	r3, #255	@ 0xff
 800162a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800162e:	4619      	mov	r1, r3
 8001630:	4803      	ldr	r0, [pc, #12]	@ (8001640 <ssd1306_Fill+0x2c>)
 8001632:	f002 ffc3 	bl	80045bc <memset>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000318 	.word	0x20000318

08001644 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	e016      	b.n	800167e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	3b50      	subs	r3, #80	@ 0x50
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff40 	bl	80014dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff ff3d 	bl	80014dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001662:	2010      	movs	r0, #16
 8001664:	f7ff ff3a 	bl	80014dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <ssd1306_UpdateScreen+0x4c>)
 800166e:	4413      	add	r3, r2
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff4a 	bl	800150c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	3301      	adds	r3, #1
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b07      	cmp	r3, #7
 8001682:	d9e5      	bls.n	8001650 <ssd1306_UpdateScreen+0xc>
    }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000318 	.word	0x20000318

08001694 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	460b      	mov	r3, r1
 80016a0:	71bb      	strb	r3, [r7, #6]
 80016a2:	4613      	mov	r3, r2
 80016a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db3d      	blt.n	800172a <ssd1306_DrawPixel+0x96>
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80016b2:	d83a      	bhi.n	800172a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d11a      	bne.n	80016f0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016ba:	79fa      	ldrb	r2, [r7, #7]
 80016bc:	79bb      	ldrb	r3, [r7, #6]
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	b2d8      	uxtb	r0, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	01db      	lsls	r3, r3, #7
 80016c6:	4413      	add	r3, r2
 80016c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001734 <ssd1306_DrawPixel+0xa0>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	79bb      	ldrb	r3, [r7, #6]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b259      	sxtb	r1, r3
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	4603      	mov	r3, r0
 80016e4:	01db      	lsls	r3, r3, #7
 80016e6:	4413      	add	r3, r2
 80016e8:	b2c9      	uxtb	r1, r1
 80016ea:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <ssd1306_DrawPixel+0xa0>)
 80016ec:	54d1      	strb	r1, [r2, r3]
 80016ee:	e01d      	b.n	800172c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016f0:	79fa      	ldrb	r2, [r7, #7]
 80016f2:	79bb      	ldrb	r3, [r7, #6]
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	b2d8      	uxtb	r0, r3
 80016f8:	4603      	mov	r3, r0
 80016fa:	01db      	lsls	r3, r3, #7
 80016fc:	4413      	add	r3, r2
 80016fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <ssd1306_DrawPixel+0xa0>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	b25a      	sxtb	r2, r3
 8001704:	79bb      	ldrb	r3, [r7, #6]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	2101      	movs	r1, #1
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	b25b      	sxtb	r3, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	b25b      	sxtb	r3, r3
 8001716:	4013      	ands	r3, r2
 8001718:	b259      	sxtb	r1, r3
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	4603      	mov	r3, r0
 800171e:	01db      	lsls	r3, r3, #7
 8001720:	4413      	add	r3, r2
 8001722:	b2c9      	uxtb	r1, r1
 8001724:	4a03      	ldr	r2, [pc, #12]	@ (8001734 <ssd1306_DrawPixel+0xa0>)
 8001726:	54d1      	strb	r1, [r2, r3]
 8001728:	e000      	b.n	800172c <ssd1306_DrawPixel+0x98>
        return;
 800172a:	bf00      	nop
    }
}
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000318 	.word	0x20000318

08001738 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4638      	mov	r0, r7
 8001742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001746:	4623      	mov	r3, r4
 8001748:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b1f      	cmp	r3, #31
 800174e:	d902      	bls.n	8001756 <ssd1306_WriteChar+0x1e>
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b7e      	cmp	r3, #126	@ 0x7e
 8001754:	d901      	bls.n	800175a <ssd1306_WriteChar+0x22>
        return 0;
 8001756:	2300      	movs	r3, #0
 8001758:	e077      	b.n	800184a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	783b      	ldrb	r3, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	2b80      	cmp	r3, #128	@ 0x80
 8001766:	dc06      	bgt.n	8001776 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001768:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 800176a:	885b      	ldrh	r3, [r3, #2]
 800176c:	461a      	mov	r2, r3
 800176e:	787b      	ldrb	r3, [r7, #1]
 8001770:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001772:	2b40      	cmp	r3, #64	@ 0x40
 8001774:	dd01      	ble.n	800177a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001776:	2300      	movs	r3, #0
 8001778:	e067      	b.n	800184a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e04e      	b.n	800181e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	3b20      	subs	r3, #32
 8001786:	7879      	ldrb	r1, [r7, #1]
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	4619      	mov	r1, r3
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	440b      	add	r3, r1
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	e036      	b.n	800180e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2d8      	uxtb	r0, r3
 80017be:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 80017c0:	885b      	ldrh	r3, [r3, #2]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff ff5f 	bl	8001694 <ssd1306_DrawPixel>
 80017d6:	e017      	b.n	8001808 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80017d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b2d8      	uxtb	r0, r3
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 80017e8:	885b      	ldrh	r3, [r3, #2]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b2d9      	uxtb	r1, r3
 80017f4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	f7ff ff46 	bl	8001694 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	3301      	adds	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	783b      	ldrb	r3, [r7, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4293      	cmp	r3, r2
 8001816:	d3c3      	bcc.n	80017a0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	3301      	adds	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	787b      	ldrb	r3, [r7, #1]
 8001820:	461a      	mov	r2, r3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4293      	cmp	r3, r2
 8001826:	d3ab      	bcc.n	8001780 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001828:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	2a00      	cmp	r2, #0
 8001830:	d005      	beq.n	800183e <ssd1306_WriteChar+0x106>
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	3a20      	subs	r2, #32
 8001838:	440a      	add	r2, r1
 800183a:	7812      	ldrb	r2, [r2, #0]
 800183c:	e000      	b.n	8001840 <ssd1306_WriteChar+0x108>
 800183e:	783a      	ldrb	r2, [r7, #0]
 8001840:	4413      	add	r3, r2
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <ssd1306_WriteChar+0x11c>)
 8001846:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	@ 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	20000718 	.word	0x20000718

08001858 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	4638      	mov	r0, r7
 8001862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001866:	e013      	b.n	8001890 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	7818      	ldrb	r0, [r3, #0]
 800186c:	7e3b      	ldrb	r3, [r7, #24]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	463b      	mov	r3, r7
 8001872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001874:	f7ff ff60 	bl	8001738 <ssd1306_WriteChar>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d002      	beq.n	800188a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	e008      	b.n	800189c <ssd1306_WriteString+0x44>
        }
        str++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	781b      	ldrb	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	4613      	mov	r3, r2
 80018b2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <ssd1306_SetCursor+0x2c>)
 80018ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <ssd1306_SetCursor+0x2c>)
 80018c2:	805a      	strh	r2, [r3, #2]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000718 	.word	0x20000718

080018d4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80018de:	2381      	movs	r3, #129	@ 0x81
 80018e0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fdf9 	bl	80014dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fdf5 	bl	80014dc <ssd1306_WriteCommand>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800190c:	23af      	movs	r3, #175	@ 0xaf
 800190e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <ssd1306_SetDisplayOn+0x38>)
 8001912:	2201      	movs	r2, #1
 8001914:	715a      	strb	r2, [r3, #5]
 8001916:	e004      	b.n	8001922 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001918:	23ae      	movs	r3, #174	@ 0xae
 800191a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <ssd1306_SetDisplayOn+0x38>)
 800191e:	2200      	movs	r2, #0
 8001920:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fdd9 	bl	80014dc <ssd1306_WriteCommand>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000718 	.word	0x20000718

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_MspInit+0x68>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a17      	ldr	r2, [pc, #92]	@ (80019a0 <HAL_MspInit+0x68>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_MspInit+0x68>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_MspInit+0x68>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <HAL_MspInit+0x68>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_MspInit+0x68>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	210f      	movs	r1, #15
 8001972:	f06f 0001 	mvn.w	r0, #1
 8001976:	f000 f9ea 	bl	8001d4e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_MspInit+0x6c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <HAL_MspInit+0x6c>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a15      	ldr	r2, [pc, #84]	@ (8001a18 <HAL_I2C_MspInit+0x70>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d123      	bne.n	8001a10 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e0:	23c0      	movs	r3, #192	@ 0xc0
 80019e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e4:	2312      	movs	r3, #18
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <HAL_I2C_MspInit+0x78>)
 80019f4:	f000 f9d4 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 80019fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a02:	61d3      	str	r3, [r2, #28]
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_I2C_MspInit+0x74>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010c00 	.word	0x40010c00

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <NMI_Handler+0x4>

08001a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f87c 	bl	8001b58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a60:	f002 f998 	bl	8003d94 <xTaskGetSchedulerState>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a6a:	f002 fb85 	bl	8004178 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a80:	f7ff fff7 	bl	8001a72 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a86:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a88:	4a0c      	ldr	r2, [pc, #48]	@ (8001abc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a9c:	4c09      	ldr	r4, [pc, #36]	@ (8001ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f002 fd8f 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aae:	f7ff fc49 	bl	8001344 <main>
  bx lr
 8001ab2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001abc:	08005434 	.word	0x08005434
  ldr r2, =_sbss
 8001ac0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ac4:	20001470 	.word	0x20001470

08001ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_Init+0x28>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	@ (8001af4 <HAL_Init+0x28>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f92b 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff ff26 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f935 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 f90b 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_IncTick+0x1c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_IncTick+0x20>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a03      	ldr	r2, [pc, #12]	@ (8001b78 <HAL_IncTick+0x20>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000720 	.word	0x20000720

08001b7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b02      	ldr	r3, [pc, #8]	@ (8001b8c <HAL_GetTick+0x10>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000720 	.word	0x20000720

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffe0 	bl	8001b7c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <__NVIC_SetPriorityGrouping>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	60d3      	str	r3, [r2, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_GetPriorityGrouping>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <__NVIC_GetPriorityGrouping+0x18>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f003 0307 	and.w	r3, r3, #7
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	@ (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff49 	bl	8001bd8 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff5e 	bl	8001c20 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffb0 	bl	8001cf4 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b08b      	sub	sp, #44	@ 0x2c
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e169      	b.n	8002088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db4:	2201      	movs	r2, #1
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 8158 	bne.w	8002082 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a9a      	ldr	r2, [pc, #616]	@ (8002040 <HAL_GPIO_Init+0x2a0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d05e      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001ddc:	4a98      	ldr	r2, [pc, #608]	@ (8002040 <HAL_GPIO_Init+0x2a0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d875      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001de2:	4a98      	ldr	r2, [pc, #608]	@ (8002044 <HAL_GPIO_Init+0x2a4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d058      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001de8:	4a96      	ldr	r2, [pc, #600]	@ (8002044 <HAL_GPIO_Init+0x2a4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d86f      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001dee:	4a96      	ldr	r2, [pc, #600]	@ (8002048 <HAL_GPIO_Init+0x2a8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d052      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001df4:	4a94      	ldr	r2, [pc, #592]	@ (8002048 <HAL_GPIO_Init+0x2a8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d869      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001dfa:	4a94      	ldr	r2, [pc, #592]	@ (800204c <HAL_GPIO_Init+0x2ac>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d04c      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001e00:	4a92      	ldr	r2, [pc, #584]	@ (800204c <HAL_GPIO_Init+0x2ac>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d863      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e06:	4a92      	ldr	r2, [pc, #584]	@ (8002050 <HAL_GPIO_Init+0x2b0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d046      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001e0c:	4a90      	ldr	r2, [pc, #576]	@ (8002050 <HAL_GPIO_Init+0x2b0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d85d      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d82a      	bhi.n	8001e6c <HAL_GPIO_Init+0xcc>
 8001e16:	2b12      	cmp	r3, #18
 8001e18:	d859      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e20 <HAL_GPIO_Init+0x80>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001e9b 	.word	0x08001e9b
 8001e24:	08001e75 	.word	0x08001e75
 8001e28:	08001e87 	.word	0x08001e87
 8001e2c:	08001ec9 	.word	0x08001ec9
 8001e30:	08001ecf 	.word	0x08001ecf
 8001e34:	08001ecf 	.word	0x08001ecf
 8001e38:	08001ecf 	.word	0x08001ecf
 8001e3c:	08001ecf 	.word	0x08001ecf
 8001e40:	08001ecf 	.word	0x08001ecf
 8001e44:	08001ecf 	.word	0x08001ecf
 8001e48:	08001ecf 	.word	0x08001ecf
 8001e4c:	08001ecf 	.word	0x08001ecf
 8001e50:	08001ecf 	.word	0x08001ecf
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ecf 	.word	0x08001ecf
 8001e5c:	08001ecf 	.word	0x08001ecf
 8001e60:	08001ecf 	.word	0x08001ecf
 8001e64:	08001e7d 	.word	0x08001e7d
 8001e68:	08001e91 	.word	0x08001e91
 8001e6c:	4a79      	ldr	r2, [pc, #484]	@ (8002054 <HAL_GPIO_Init+0x2b4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e72:	e02c      	b.n	8001ece <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e029      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	3304      	adds	r3, #4
 8001e82:	623b      	str	r3, [r7, #32]
          break;
 8001e84:	e024      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	3308      	adds	r3, #8
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e01f      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	330c      	adds	r3, #12
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e01a      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e013      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	611a      	str	r2, [r3, #16]
          break;
 8001eba:	e009      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	615a      	str	r2, [r3, #20]
          break;
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          break;
 8001ece:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2bff      	cmp	r3, #255	@ 0xff
 8001ed4:	d801      	bhi.n	8001eda <HAL_GPIO_Init+0x13a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	e001      	b.n	8001ede <HAL_GPIO_Init+0x13e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	@ 0xff
 8001ee4:	d802      	bhi.n	8001eec <HAL_GPIO_Init+0x14c>
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x152>
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eee:	3b08      	subs	r3, #8
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	210f      	movs	r1, #15
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	6a39      	ldr	r1, [r7, #32]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80b1 	beq.w	8002082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f20:	4b4d      	ldr	r3, [pc, #308]	@ (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a4c      	ldr	r2, [pc, #304]	@ (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f38:	4a48      	ldr	r2, [pc, #288]	@ (800205c <HAL_GPIO_Init+0x2bc>)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a40      	ldr	r2, [pc, #256]	@ (8002060 <HAL_GPIO_Init+0x2c0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_GPIO_Init+0x1ec>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3f      	ldr	r2, [pc, #252]	@ (8002064 <HAL_GPIO_Init+0x2c4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00d      	beq.n	8001f88 <HAL_GPIO_Init+0x1e8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002068 <HAL_GPIO_Init+0x2c8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <HAL_GPIO_Init+0x1e4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	@ (800206c <HAL_GPIO_Init+0x2cc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_GPIO_Init+0x1e0>
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e006      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e004      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e002      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	f002 0203 	and.w	r2, r2, #3
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	4093      	lsls	r3, r2
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f9e:	492f      	ldr	r1, [pc, #188]	@ (800205c <HAL_GPIO_Init+0x2bc>)
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	492c      	ldr	r1, [pc, #176]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4928      	ldr	r1, [pc, #160]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	4922      	ldr	r1, [pc, #136]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60cb      	str	r3, [r1, #12]
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	491e      	ldr	r1, [pc, #120]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4918      	ldr	r1, [pc, #96]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	4914      	ldr	r1, [pc, #80]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d021      	beq.n	8002074 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002030:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	490e      	ldr	r1, [pc, #56]	@ (8002070 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e021      	b.n	8002082 <HAL_GPIO_Init+0x2e2>
 800203e:	bf00      	nop
 8002040:	10320000 	.word	0x10320000
 8002044:	10310000 	.word	0x10310000
 8002048:	10220000 	.word	0x10220000
 800204c:	10210000 	.word	0x10210000
 8002050:	10120000 	.word	0x10120000
 8002054:	10110000 	.word	0x10110000
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000
 8002060:	40010800 	.word	0x40010800
 8002064:	40010c00 	.word	0x40010c00
 8002068:	40011000 	.word	0x40011000
 800206c:	40011400 	.word	0x40011400
 8002070:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_GPIO_Init+0x304>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	43db      	mvns	r3, r3
 800207c:	4909      	ldr	r1, [pc, #36]	@ (80020a4 <HAL_GPIO_Init+0x304>)
 800207e:	4013      	ands	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	3301      	adds	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	f47f ae8e 	bne.w	8001db4 <HAL_GPIO_Init+0x14>
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	372c      	adds	r7, #44	@ 0x2c
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40010400 	.word	0x40010400

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e12b      	b.n	8002312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fc6a 	bl	80019a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	@ 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800210a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800210c:	f001 f842 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a81      	ldr	r2, [pc, #516]	@ (800231c <HAL_I2C_Init+0x274>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d807      	bhi.n	800212c <HAL_I2C_Init+0x84>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a80      	ldr	r2, [pc, #512]	@ (8002320 <HAL_I2C_Init+0x278>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e006      	b.n	800213a <HAL_I2C_Init+0x92>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a7d      	ldr	r2, [pc, #500]	@ (8002324 <HAL_I2C_Init+0x27c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e7      	b.n	8002312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a78      	ldr	r2, [pc, #480]	@ (8002328 <HAL_I2C_Init+0x280>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0c9b      	lsrs	r3, r3, #18
 800214c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a6a      	ldr	r2, [pc, #424]	@ (800231c <HAL_I2C_Init+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d802      	bhi.n	800217c <HAL_I2C_Init+0xd4>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	e009      	b.n	8002190 <HAL_I2C_Init+0xe8>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a69      	ldr	r2, [pc, #420]	@ (800232c <HAL_I2C_Init+0x284>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	495c      	ldr	r1, [pc, #368]	@ (800231c <HAL_I2C_Init+0x274>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d819      	bhi.n	80021e4 <HAL_I2C_Init+0x13c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e59      	subs	r1, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021c4:	400b      	ands	r3, r1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_I2C_Init+0x138>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	e051      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e04f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_I2C_Init+0x168>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e012      	b.n	8002236 <HAL_I2C_Init+0x18e>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	0099      	lsls	r1, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x196>
 800223a:	2301      	movs	r3, #1
 800223c:	e022      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <HAL_I2C_Init+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e58      	subs	r0, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	440b      	add	r3, r1
 8002254:	fbb0 f3f3 	udiv	r3, r0, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6911      	ldr	r1, [r2, #16]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	000186a0 	.word	0x000186a0
 8002320:	001e847f 	.word	0x001e847f
 8002324:	003d08ff 	.word	0x003d08ff
 8002328:	431bde83 	.word	0x431bde83
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800234a:	f7ff fc17 	bl	8001b7c <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b20      	cmp	r3, #32
 800235a:	f040 80d9 	bne.w	8002510 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2319      	movs	r3, #25
 8002364:	2201      	movs	r2, #1
 8002366:	496d      	ldr	r1, [pc, #436]	@ (800251c <HAL_I2C_Mem_Write+0x1ec>)
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f971 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002374:	2302      	movs	r3, #2
 8002376:	e0cc      	b.n	8002512 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Mem_Write+0x56>
 8002382:	2302      	movs	r3, #2
 8002384:	e0c5      	b.n	8002512 <HAL_I2C_Mem_Write+0x1e2>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d007      	beq.n	80023ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2221      	movs	r2, #33	@ 0x21
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2240      	movs	r2, #64	@ 0x40
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002520 <HAL_I2C_Mem_Write+0x1f0>)
 80023ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ee:	88f8      	ldrh	r0, [r7, #6]
 80023f0:	893a      	ldrh	r2, [r7, #8]
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4603      	mov	r3, r0
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f890 	bl	8002524 <I2C_RequestMemoryWrite>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d052      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e081      	b.n	8002512 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fa36 	bl	8002884 <I2C_WaitOnTXEFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00d      	beq.n	800243a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	2b04      	cmp	r3, #4
 8002424:	d107      	bne.n	8002436 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002434:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11b      	bne.n	80024b0 <HAL_I2C_Mem_Write+0x180>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247c:	2b00      	cmp	r3, #0
 800247e:	d017      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1aa      	bne.n	800240e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fa29 	bl	8002914 <I2C_WaitOnBTFFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d107      	bne.n	80024e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e016      	b.n	8002512 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	00100002 	.word	0x00100002
 8002520:	ffff0000 	.word	0xffff0000

08002524 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	817b      	strh	r3, [r7, #10]
 8002536:	460b      	mov	r3, r1
 8002538:	813b      	strh	r3, [r7, #8]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	2200      	movs	r2, #0
 8002556:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f878 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002574:	d103      	bne.n	800257e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e05f      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	492d      	ldr	r1, [pc, #180]	@ (800264c <I2C_RequestMemoryWrite+0x128>)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f8d3 	bl	8002744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e04c      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c0:	6a39      	ldr	r1, [r7, #32]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f95e 	bl	8002884 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00d      	beq.n	80025ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d107      	bne.n	80025e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e02b      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f0:	893b      	ldrh	r3, [r7, #8]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	611a      	str	r2, [r3, #16]
 80025fa:	e021      	b.n	8002640 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025fc:	893b      	ldrh	r3, [r7, #8]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b29b      	uxth	r3, r3
 8002602:	b2da      	uxtb	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	6a39      	ldr	r1, [r7, #32]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f938 	bl	8002884 <I2C_WaitOnTXEFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	2b04      	cmp	r3, #4
 8002620:	d107      	bne.n	8002632 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e005      	b.n	8002642 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002636:	893b      	ldrh	r3, [r7, #8]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	00010002 	.word	0x00010002

08002650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002660:	e048      	b.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d044      	beq.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7ff fa87 	bl	8001b7c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d139      	bne.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d10d      	bne.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	43da      	mvns	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4013      	ands	r3, r2
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	e00c      	b.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	43da      	mvns	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	4013      	ands	r3, r2
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d116      	bne.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e023      	b.n	800273c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d10d      	bne.n	800271a <I2C_WaitOnFlagUntilTimeout+0xca>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	e00c      	b.n	8002734 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	43da      	mvns	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	429a      	cmp	r2, r3
 8002738:	d093      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002752:	e071      	b.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002762:	d123      	bne.n	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800277c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e067      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d041      	beq.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b4:	f7ff f9e2 	bl	8001b7c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d302      	bcc.n	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d136      	bne.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10c      	bne.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4013      	ands	r3, r2
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	e00b      	b.n	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	43da      	mvns	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e021      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	0c1b      	lsrs	r3, r3, #16
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10c      	bne.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e00b      	b.n	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4013      	ands	r3, r2
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	2300      	moveq	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af6d 	bne.w	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002890:	e034      	b.n	80028fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f886 	bl	80029a4 <I2C_IsAcknowledgeFailed>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e034      	b.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d028      	beq.n	80028fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7ff f967 	bl	8001b7c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11d      	bne.n	80028fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	2b80      	cmp	r3, #128	@ 0x80
 80028cc:	d016      	beq.n	80028fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e007      	b.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002906:	2b80      	cmp	r3, #128	@ 0x80
 8002908:	d1c3      	bne.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002920:	e034      	b.n	800298c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f83e 	bl	80029a4 <I2C_IsAcknowledgeFailed>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e034      	b.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d028      	beq.n	800298c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7ff f91f 	bl	8001b7c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11d      	bne.n	800298c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d016      	beq.n	800298c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e007      	b.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b04      	cmp	r3, #4
 8002998:	d1c3      	bne.n	8002922 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ba:	d11b      	bne.n	80029f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f043 0204 	orr.w	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e272      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8087 	beq.w	8002b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a20:	4b92      	ldr	r3, [pc, #584]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d00c      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d112      	bne.n	8002a5e <HAL_RCC_OscConfig+0x5e>
 8002a38:	4b8c      	ldr	r3, [pc, #560]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a44:	d10b      	bne.n	8002a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a46:	4b89      	ldr	r3, [pc, #548]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d06c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x12c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d168      	bne.n	8002b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e24c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x76>
 8002a68:	4b80      	ldr	r3, [pc, #512]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e02e      	b.n	8002ad4 <HAL_RCC_OscConfig+0xd4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x98>
 8002a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7a      	ldr	r2, [pc, #488]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b78      	ldr	r3, [pc, #480]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a77      	ldr	r2, [pc, #476]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e01d      	b.n	8002ad4 <HAL_RCC_OscConfig+0xd4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0xbc>
 8002aa2:	4b72      	ldr	r3, [pc, #456]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a71      	ldr	r2, [pc, #452]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b6f      	ldr	r3, [pc, #444]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0xd4>
 8002abc:	4b6b      	ldr	r3, [pc, #428]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b68      	ldr	r3, [pc, #416]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a67      	ldr	r2, [pc, #412]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff f84e 	bl	8001b7c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7ff f84a 	bl	8001b7c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	@ 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e200      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe4>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff f83a 	bl	8001b7c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff f836 	bl	8001b7c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1ec      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	4b53      	ldr	r3, [pc, #332]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x10c>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d063      	beq.n	8002c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b46:	4b49      	ldr	r3, [pc, #292]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d11c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x18c>
 8002b52:	4b46      	ldr	r3, [pc, #280]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d116      	bne.n	8002b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	4b43      	ldr	r3, [pc, #268]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_RCC_OscConfig+0x176>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e1c0      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4b3d      	ldr	r3, [pc, #244]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4939      	ldr	r1, [pc, #228]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	e03a      	b.n	8002c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b94:	4b36      	ldr	r3, [pc, #216]	@ (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe ffef 	bl	8001b7c <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe ffeb 	bl	8001b7c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e1a1      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4927      	ldr	r1, [pc, #156]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
 8002bd4:	e015      	b.n	8002c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	4b26      	ldr	r3, [pc, #152]	@ (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe ffce 	bl	8001b7c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be4:	f7fe ffca 	bl	8001b7c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e180      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d03a      	beq.n	8002c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d019      	beq.n	8002c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c16:	4b17      	ldr	r3, [pc, #92]	@ (8002c74 <HAL_RCC_OscConfig+0x274>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe ffae 	bl	8001b7c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c24:	f7fe ffaa 	bl	8001b7c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e160      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <HAL_RCC_OscConfig+0x26c>)
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f000 faba 	bl	80031bc <RCC_Delay>
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe ff94 	bl	8001b7c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c56:	e00f      	b.n	8002c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fe ff90 	bl	8001b7c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d908      	bls.n	8002c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e146      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	42420000 	.word	0x42420000
 8002c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b92      	ldr	r3, [pc, #584]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e9      	bne.n	8002c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a6 	beq.w	8002dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b8b      	ldr	r3, [pc, #556]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b88      	ldr	r3, [pc, #544]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4a87      	ldr	r2, [pc, #540]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	61d3      	str	r3, [r2, #28]
 8002cae:	4b85      	ldr	r3, [pc, #532]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b82      	ldr	r3, [pc, #520]	@ (8002ec8 <HAL_RCC_OscConfig+0x4c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d118      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec8 <HAL_RCC_OscConfig+0x4c8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec8 <HAL_RCC_OscConfig+0x4c8>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe ff51 	bl	8001b7c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fe ff4d 	bl	8001b7c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	@ 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e103      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4b75      	ldr	r3, [pc, #468]	@ (8002ec8 <HAL_RCC_OscConfig+0x4c8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x312>
 8002d04:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	e02d      	b.n	8002d6e <HAL_RCC_OscConfig+0x36e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x334>
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4a69      	ldr	r2, [pc, #420]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6213      	str	r3, [r2, #32]
 8002d26:	4b67      	ldr	r3, [pc, #412]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a66      	ldr	r2, [pc, #408]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	e01c      	b.n	8002d6e <HAL_RCC_OscConfig+0x36e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d10c      	bne.n	8002d56 <HAL_RCC_OscConfig+0x356>
 8002d3c:	4b61      	ldr	r3, [pc, #388]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4a60      	ldr	r2, [pc, #384]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	4b5e      	ldr	r3, [pc, #376]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	e00b      	b.n	8002d6e <HAL_RCC_OscConfig+0x36e>
 8002d56:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6213      	str	r3, [r2, #32]
 8002d62:	4b58      	ldr	r3, [pc, #352]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a57      	ldr	r2, [pc, #348]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	f023 0304 	bic.w	r3, r3, #4
 8002d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d015      	beq.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7fe ff01 	bl	8001b7c <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe fefd 	bl	8001b7c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0b1      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ee      	beq.n	8002d7e <HAL_RCC_OscConfig+0x37e>
 8002da0:	e014      	b.n	8002dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe feeb 	bl	8001b7c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fee7 	bl	8001b7c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e09b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc0:	4b40      	ldr	r3, [pc, #256]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ee      	bne.n	8002daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8087 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de8:	4b36      	ldr	r3, [pc, #216]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d061      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d146      	bne.n	8002e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fe febb 	bl	8001b7c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7fe feb7 	bl	8001b7c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e06d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e30:	d108      	bne.n	8002e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e32:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	4921      	ldr	r1, [pc, #132]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e44:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a19      	ldr	r1, [r3, #32]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	430b      	orrs	r3, r1
 8002e56:	491b      	ldr	r1, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe fe8b 	bl	8001b7c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fe fe87 	bl	8001b7c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e03d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x46a>
 8002e88:	e035      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fe74 	bl	8001b7c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe fe70 	bl	8001b7c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e026      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x498>
 8002eb6:	e01e      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e019      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_RCC_OscConfig+0x500>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000

08002f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0d0      	b.n	80030ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b6a      	ldr	r3, [pc, #424]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d910      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b67      	ldr	r3, [pc, #412]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 0207 	bic.w	r2, r3, #7
 8002f2e:	4965      	ldr	r1, [pc, #404]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b63      	ldr	r3, [pc, #396]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0b8      	b.n	80030ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f60:	4b59      	ldr	r3, [pc, #356]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a58      	ldr	r2, [pc, #352]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f78:	4b53      	ldr	r3, [pc, #332]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a52      	ldr	r2, [pc, #328]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b50      	ldr	r3, [pc, #320]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	494d      	ldr	r1, [pc, #308]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d040      	beq.n	8003024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b47      	ldr	r3, [pc, #284]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d115      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b41      	ldr	r3, [pc, #260]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e073      	b.n	80030ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e06b      	b.n	80030ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b39      	ldr	r3, [pc, #228]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4936      	ldr	r1, [pc, #216]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe fdc2 	bl	8001b7c <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7fe fdbe 	bl	8001b7c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e053      	b.n	80030ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b2d      	ldr	r3, [pc, #180]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b27      	ldr	r3, [pc, #156]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d210      	bcs.n	8003054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	4922      	ldr	r1, [pc, #136]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b20      	ldr	r3, [pc, #128]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e032      	b.n	80030ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4916      	ldr	r1, [pc, #88]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800307e:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	490e      	ldr	r1, [pc, #56]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003092:	f000 f821 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003096:	4602      	mov	r2, r0
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	490a      	ldr	r1, [pc, #40]	@ (80030cc <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	5ccb      	ldrb	r3, [r1, r3]
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	4a09      	ldr	r2, [pc, #36]	@ (80030d0 <HAL_RCC_ClockConfig+0x1cc>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_RCC_ClockConfig+0x1d0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fd20 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40021000 	.word	0x40021000
 80030cc:	08005400 	.word	0x08005400
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030f2:	4b1e      	ldr	r3, [pc, #120]	@ (800316c <HAL_RCC_GetSysClockFreq+0x94>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d002      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x30>
 8003102:	2b08      	cmp	r3, #8
 8003104:	d003      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x36>
 8003106:	e027      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003108:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x98>)
 800310a:	613b      	str	r3, [r7, #16]
      break;
 800310c:	e027      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	0c9b      	lsrs	r3, r3, #18
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_RCC_GetSysClockFreq+0x94>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	0c5b      	lsrs	r3, r3, #17
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	4a11      	ldr	r2, [pc, #68]	@ (8003178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a0d      	ldr	r2, [pc, #52]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x98>)
 800313a:	fb03 f202 	mul.w	r2, r3, r2
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e004      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a0c      	ldr	r2, [pc, #48]	@ (800317c <HAL_RCC_GetSysClockFreq+0xa4>)
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	613b      	str	r3, [r7, #16]
      break;
 8003156:	e002      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x98>)
 800315a:	613b      	str	r3, [r7, #16]
      break;
 800315c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315e:	693b      	ldr	r3, [r7, #16]
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	007a1200 	.word	0x007a1200
 8003174:	08005418 	.word	0x08005418
 8003178:	08005428 	.word	0x08005428
 800317c:	003d0900 	.word	0x003d0900

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b02      	ldr	r3, [pc, #8]	@ (8003190 <HAL_RCC_GetHCLKFreq+0x10>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	20000000 	.word	0x20000000

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003198:	f7ff fff2 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4903      	ldr	r1, [pc, #12]	@ (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08005410 	.word	0x08005410

080031bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c4:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <RCC_Delay+0x34>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	@ (80031f4 <RCC_Delay+0x38>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0a5b      	lsrs	r3, r3, #9
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d8:	bf00      	nop
  }
  while (Delay --);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	60fa      	str	r2, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <RCC_Delay+0x1c>
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	20000000 	.word	0x20000000
 80031f4:	10624dd3 	.word	0x10624dd3

080031f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f103 0208 	add.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f103 0208 	add.w	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f103 0208 	add.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d103      	bne.n	80032b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e00c      	b.n	80032ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3308      	adds	r3, #8
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e002      	b.n	80032c2 <vListInsert+0x2e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d2f6      	bcs.n	80032bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6892      	ldr	r2, [r2, #8]
 800331a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6852      	ldr	r2, [r2, #4]
 8003324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	d103      	bne.n	8003338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1e5a      	subs	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003356:	b580      	push	{r7, lr}
 8003358:	b08e      	sub	sp, #56	@ 0x38
 800335a:	af04      	add	r7, sp, #16
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	61fb      	str	r3, [r7, #28]
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033a0:	2354      	movs	r3, #84	@ 0x54
 80033a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b54      	cmp	r3, #84	@ 0x54
 80033a8:	d00b      	beq.n	80033c2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	61bb      	str	r3, [r7, #24]
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	e7fd      	b.n	80033be <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01e      	beq.n	8003406 <xTaskCreateStatic+0xb0>
 80033c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01b      	beq.n	8003406 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033e0:	2300      	movs	r3, #0
 80033e2:	9303      	str	r3, [sp, #12]
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	9302      	str	r3, [sp, #8]
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f850 	bl	800349e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003400:	f000 f8ce 	bl	80035a0 <prvAddNewTaskToReadyList>
 8003404:	e001      	b.n	800340a <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800340a:	697b      	ldr	r3, [r7, #20]
	}
 800340c:	4618      	mov	r0, r3
 800340e:	3728      	adds	r7, #40	@ 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	@ 0x30
 8003418:	af04      	add	r7, sp, #16
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fee9 	bl	8004200 <pvPortMalloc>
 800342e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003436:	2054      	movs	r0, #84	@ 0x54
 8003438:	f000 fee2 	bl	8004200 <pvPortMalloc>
 800343c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30
 800344a:	e005      	b.n	8003458 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f000 ff9f 	bl	8004390 <vPortFree>
 8003452:	e001      	b.n	8003458 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	2300      	movs	r3, #0
 800346a:	9303      	str	r3, [sp, #12]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	9302      	str	r3, [sp, #8]
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f80e 	bl	800349e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003482:	69f8      	ldr	r0, [r7, #28]
 8003484:	f000 f88c 	bl	80035a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003488:	2301      	movs	r3, #1
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e002      	b.n	8003494 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003494:	69bb      	ldr	r3, [r7, #24]
	}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b088      	sub	sp, #32
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034b6:	3b01      	subs	r3, #1
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f023 0307 	bic.w	r3, r3, #7
 80034c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	617b      	str	r3, [r7, #20]
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e012      	b.n	8003514 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	7819      	ldrb	r1, [r3, #0]
 80034f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	3334      	adds	r3, #52	@ 0x34
 80034fe:	460a      	mov	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b0f      	cmp	r3, #15
 8003518:	d9e9      	bls.n	80034ee <prvInitialiseNewTask+0x50>
 800351a:	e000      	b.n	800351e <prvInitialiseNewTask+0x80>
		{
			break;
 800351c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	2b06      	cmp	r3, #6
 800352a:	d901      	bls.n	8003530 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800352c:	2306      	movs	r3, #6
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800353a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	2200      	movs	r2, #0
 8003540:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fe75 	bl	8003236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	3318      	adds	r3, #24
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fe70 	bl	8003236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355e:	f1c3 0207 	rsb	r2, r3, #7
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800356c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356e:	2200      	movs	r2, #0
 8003570:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	69b8      	ldr	r0, [r7, #24]
 8003580:	f000 fc8c 	bl	8003e9c <pxPortInitialiseStack>
 8003584:	4602      	mov	r2, r0
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003596:	bf00      	nop
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035a8:	f000 fd68 	bl	800407c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003658 <prvAddNewTaskToReadyList+0xb8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a29      	ldr	r2, [pc, #164]	@ (8003658 <prvAddNewTaskToReadyList+0xb8>)
 80035b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035b6:	4b29      	ldr	r3, [pc, #164]	@ (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035be:	4a27      	ldr	r2, [pc, #156]	@ (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035c4:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <prvAddNewTaskToReadyList+0xb8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d110      	bne.n	80035ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035cc:	f000 fb20 	bl	8003c10 <prvInitialiseTaskLists>
 80035d0:	e00d      	b.n	80035ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035d2:	4b23      	ldr	r3, [pc, #140]	@ (8003660 <prvAddNewTaskToReadyList+0xc0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035da:	4b20      	ldr	r3, [pc, #128]	@ (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d802      	bhi.n	80035ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035e8:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <prvAddNewTaskToReadyList+0xbc>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <prvAddNewTaskToReadyList+0xc4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <prvAddNewTaskToReadyList+0xc4>)
 80035f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	2201      	movs	r2, #1
 80035fe:	409a      	lsls	r2, r3
 8003600:	4b19      	ldr	r3, [pc, #100]	@ (8003668 <prvAddNewTaskToReadyList+0xc8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	4a18      	ldr	r2, [pc, #96]	@ (8003668 <prvAddNewTaskToReadyList+0xc8>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4a15      	ldr	r2, [pc, #84]	@ (800366c <prvAddNewTaskToReadyList+0xcc>)
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7ff fe14 	bl	800324e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003626:	f000 fd59 	bl	80040dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800362a:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <prvAddNewTaskToReadyList+0xc0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00e      	beq.n	8003650 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003632:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <prvAddNewTaskToReadyList+0xbc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	429a      	cmp	r2, r3
 800363e:	d207      	bcs.n	8003650 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <prvAddNewTaskToReadyList+0xd0>)
 8003642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000824 	.word	0x20000824
 800365c:	20000724 	.word	0x20000724
 8003660:	20000830 	.word	0x20000830
 8003664:	20000840 	.word	0x20000840
 8003668:	2000082c 	.word	0x2000082c
 800366c:	20000728 	.word	0x20000728
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	@ 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	617b      	str	r3, [r7, #20]
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <vTaskDelayUntil+0x4a>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	613b      	str	r3, [r7, #16]
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	e7fd      	b.n	80036ba <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80036be:	4b2a      	ldr	r3, [pc, #168]	@ (8003768 <vTaskDelayUntil+0xf4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <vTaskDelayUntil+0x6a>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	60fb      	str	r3, [r7, #12]
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80036de:	f000 f8ab 	bl	8003838 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <vTaskDelayUntil+0xf8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d20b      	bcs.n	8003714 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	429a      	cmp	r2, r3
 8003704:	d211      	bcs.n	800372a <vTaskDelayUntil+0xb6>
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90d      	bls.n	800372a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800370e:	2301      	movs	r3, #1
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	e00a      	b.n	800372a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	429a      	cmp	r2, r3
 800371c:	d303      	bcc.n	8003726 <vTaskDelayUntil+0xb2>
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	429a      	cmp	r2, r3
 8003724:	d901      	bls.n	800372a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003726:	2301      	movs	r3, #1
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fb46 	bl	8003dd0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003744:	f000 f886 	bl	8003854 <xTaskResumeAll>
 8003748:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8003750:	4b07      	ldr	r3, [pc, #28]	@ (8003770 <vTaskDelayUntil+0xfc>)
 8003752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2000084c 	.word	0x2000084c
 800376c:	20000828 	.word	0x20000828
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	@ 0x28
 8003778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003782:	463a      	mov	r2, r7
 8003784:	1d39      	adds	r1, r7, #4
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fd1e 	bl	80011cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	9202      	str	r2, [sp, #8]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	2300      	movs	r3, #0
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	460a      	mov	r2, r1
 80037a2:	491f      	ldr	r1, [pc, #124]	@ (8003820 <vTaskStartScheduler+0xac>)
 80037a4:	481f      	ldr	r0, [pc, #124]	@ (8003824 <vTaskStartScheduler+0xb0>)
 80037a6:	f7ff fdd6 	bl	8003356 <xTaskCreateStatic>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003828 <vTaskStartScheduler+0xb4>)
 80037ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <vTaskStartScheduler+0xb4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037b8:	2301      	movs	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e001      	b.n	80037c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d116      	bne.n	80037f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	613b      	str	r3, [r7, #16]
}
 80037da:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <vTaskStartScheduler+0xb8>)
 80037de:	f04f 32ff 	mov.w	r2, #4294967295
 80037e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037e4:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <vTaskStartScheduler+0xbc>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037ea:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <vTaskStartScheduler+0xc0>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037f0:	f000 fbd2 	bl	8003f98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037f4:	e00f      	b.n	8003816 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d10b      	bne.n	8003816 <vTaskStartScheduler+0xa2>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	60fb      	str	r3, [r7, #12]
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	e7fd      	b.n	8003812 <vTaskStartScheduler+0x9e>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	08004690 	.word	0x08004690
 8003824:	08003be1 	.word	0x08003be1
 8003828:	20000848 	.word	0x20000848
 800382c:	20000844 	.word	0x20000844
 8003830:	20000830 	.word	0x20000830
 8003834:	20000828 	.word	0x20000828

08003838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <vTaskSuspendAll+0x18>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	4a03      	ldr	r2, [pc, #12]	@ (8003850 <vTaskSuspendAll+0x18>)
 8003844:	6013      	str	r3, [r2, #0]
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	2000084c 	.word	0x2000084c

08003854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003862:	4b42      	ldr	r3, [pc, #264]	@ (800396c <xTaskResumeAll+0x118>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <xTaskResumeAll+0x2e>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	603b      	str	r3, [r7, #0]
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	e7fd      	b.n	800387e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003882:	f000 fbfb 	bl	800407c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003886:	4b39      	ldr	r3, [pc, #228]	@ (800396c <xTaskResumeAll+0x118>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3b01      	subs	r3, #1
 800388c:	4a37      	ldr	r2, [pc, #220]	@ (800396c <xTaskResumeAll+0x118>)
 800388e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003890:	4b36      	ldr	r3, [pc, #216]	@ (800396c <xTaskResumeAll+0x118>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d161      	bne.n	800395c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003898:	4b35      	ldr	r3, [pc, #212]	@ (8003970 <xTaskResumeAll+0x11c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05d      	beq.n	800395c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038a0:	e02e      	b.n	8003900 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038a2:	4b34      	ldr	r3, [pc, #208]	@ (8003974 <xTaskResumeAll+0x120>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3318      	adds	r3, #24
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fd28 	bl	8003304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fd23 	bl	8003304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	2201      	movs	r2, #1
 80038c4:	409a      	lsls	r2, r3
 80038c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003978 <xTaskResumeAll+0x124>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <xTaskResumeAll+0x124>)
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4a27      	ldr	r2, [pc, #156]	@ (800397c <xTaskResumeAll+0x128>)
 80038de:	441a      	add	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7ff fcb1 	bl	800324e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f0:	4b23      	ldr	r3, [pc, #140]	@ (8003980 <xTaskResumeAll+0x12c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80038fa:	4b22      	ldr	r3, [pc, #136]	@ (8003984 <xTaskResumeAll+0x130>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003900:	4b1c      	ldr	r3, [pc, #112]	@ (8003974 <xTaskResumeAll+0x120>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1cc      	bne.n	80038a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800390e:	f000 fa1d 	bl	8003d4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003912:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <xTaskResumeAll+0x134>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800391e:	f000 f845 	bl	80039ac <xTaskIncrementTick>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003928:	4b16      	ldr	r3, [pc, #88]	@ (8003984 <xTaskResumeAll+0x130>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3b01      	subs	r3, #1
 8003932:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f1      	bne.n	800391e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <xTaskResumeAll+0x134>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003940:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <xTaskResumeAll+0x130>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800394c:	4b0f      	ldr	r3, [pc, #60]	@ (800398c <xTaskResumeAll+0x138>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800395c:	f000 fbbe 	bl	80040dc <vPortExitCritical>

	return xAlreadyYielded;
 8003960:	68bb      	ldr	r3, [r7, #8]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000084c 	.word	0x2000084c
 8003970:	20000824 	.word	0x20000824
 8003974:	200007e4 	.word	0x200007e4
 8003978:	2000082c 	.word	0x2000082c
 800397c:	20000728 	.word	0x20000728
 8003980:	20000724 	.word	0x20000724
 8003984:	20000838 	.word	0x20000838
 8003988:	20000834 	.word	0x20000834
 800398c:	e000ed04 	.word	0xe000ed04

08003990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003996:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <xTaskGetTickCount+0x18>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800399c:	687b      	ldr	r3, [r7, #4]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	20000828 	.word	0x20000828

080039ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b6:	4b51      	ldr	r3, [pc, #324]	@ (8003afc <xTaskIncrementTick+0x150>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 808e 	bne.w	8003adc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b00 <xTaskIncrementTick+0x154>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b00 <xTaskIncrementTick+0x154>)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d121      	bne.n	8003a18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80039d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003b04 <xTaskIncrementTick+0x158>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	603b      	str	r3, [r7, #0]
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	e7fd      	b.n	80039f2 <xTaskIncrementTick+0x46>
 80039f6:	4b43      	ldr	r3, [pc, #268]	@ (8003b04 <xTaskIncrementTick+0x158>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4b42      	ldr	r3, [pc, #264]	@ (8003b08 <xTaskIncrementTick+0x15c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a40      	ldr	r2, [pc, #256]	@ (8003b04 <xTaskIncrementTick+0x158>)
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4a40      	ldr	r2, [pc, #256]	@ (8003b08 <xTaskIncrementTick+0x15c>)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b40      	ldr	r3, [pc, #256]	@ (8003b0c <xTaskIncrementTick+0x160>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a3e      	ldr	r2, [pc, #248]	@ (8003b0c <xTaskIncrementTick+0x160>)
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	f000 f99a 	bl	8003d4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a18:	4b3d      	ldr	r3, [pc, #244]	@ (8003b10 <xTaskIncrementTick+0x164>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d34d      	bcc.n	8003abe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a22:	4b38      	ldr	r3, [pc, #224]	@ (8003b04 <xTaskIncrementTick+0x158>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <xTaskIncrementTick+0x84>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <xTaskIncrementTick+0x86>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a36:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <xTaskIncrementTick+0x164>)
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	601a      	str	r2, [r3, #0]
					break;
 8003a3e:	e03e      	b.n	8003abe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a40:	4b30      	ldr	r3, [pc, #192]	@ (8003b04 <xTaskIncrementTick+0x158>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d203      	bcs.n	8003a60 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a58:	4a2d      	ldr	r2, [pc, #180]	@ (8003b10 <xTaskIncrementTick+0x164>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
						break;
 8003a5e:	e02e      	b.n	8003abe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fc4d 	bl	8003304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3318      	adds	r3, #24
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fc44 	bl	8003304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <xTaskIncrementTick+0x168>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	4a22      	ldr	r2, [pc, #136]	@ (8003b14 <xTaskIncrementTick+0x168>)
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <xTaskIncrementTick+0x16c>)
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7ff fbd2 	bl	800324e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aae:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <xTaskIncrementTick+0x170>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3b4      	bcc.n	8003a22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003abc:	e7b1      	b.n	8003a22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003abe:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <xTaskIncrementTick+0x170>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac4:	4914      	ldr	r1, [pc, #80]	@ (8003b18 <xTaskIncrementTick+0x16c>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d907      	bls.n	8003ae6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e004      	b.n	8003ae6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003adc:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <xTaskIncrementTick+0x174>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8003b20 <xTaskIncrementTick+0x174>)
 8003ae4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <xTaskIncrementTick+0x178>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003af2:	697b      	ldr	r3, [r7, #20]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	2000084c 	.word	0x2000084c
 8003b00:	20000828 	.word	0x20000828
 8003b04:	200007dc 	.word	0x200007dc
 8003b08:	200007e0 	.word	0x200007e0
 8003b0c:	2000083c 	.word	0x2000083c
 8003b10:	20000844 	.word	0x20000844
 8003b14:	2000082c 	.word	0x2000082c
 8003b18:	20000728 	.word	0x20000728
 8003b1c:	20000724 	.word	0x20000724
 8003b20:	20000834 	.word	0x20000834
 8003b24:	20000838 	.word	0x20000838

08003b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b2e:	4b27      	ldr	r3, [pc, #156]	@ (8003bcc <vTaskSwitchContext+0xa4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b36:	4b26      	ldr	r3, [pc, #152]	@ (8003bd0 <vTaskSwitchContext+0xa8>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b3c:	e040      	b.n	8003bc0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003b3e:	4b24      	ldr	r3, [pc, #144]	@ (8003bd0 <vTaskSwitchContext+0xa8>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b44:	4b23      	ldr	r3, [pc, #140]	@ (8003bd4 <vTaskSwitchContext+0xac>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	f1c3 031f 	rsb	r3, r3, #31
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	491f      	ldr	r1, [pc, #124]	@ (8003bd8 <vTaskSwitchContext+0xb0>)
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	e7fd      	b.n	8003b82 <vTaskSwitchContext+0x5a>
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4a11      	ldr	r2, [pc, #68]	@ (8003bd8 <vTaskSwitchContext+0xb0>)
 8003b92:	4413      	add	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d104      	bne.n	8003bb6 <vTaskSwitchContext+0x8e>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a07      	ldr	r2, [pc, #28]	@ (8003bdc <vTaskSwitchContext+0xb4>)
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	2000084c 	.word	0x2000084c
 8003bd0:	20000838 	.word	0x20000838
 8003bd4:	2000082c 	.word	0x2000082c
 8003bd8:	20000728 	.word	0x20000728
 8003bdc:	20000724 	.word	0x20000724

08003be0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003be8:	f000 f852 	bl	8003c90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <prvIdleTask+0x28>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d9f9      	bls.n	8003be8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <prvIdleTask+0x2c>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c04:	e7f0      	b.n	8003be8 <prvIdleTask+0x8>
 8003c06:	bf00      	nop
 8003c08:	20000728 	.word	0x20000728
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	e00c      	b.n	8003c36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a12      	ldr	r2, [pc, #72]	@ (8003c70 <prvInitialiseTaskLists+0x60>)
 8003c28:	4413      	add	r3, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fae4 	bl	80031f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3301      	adds	r3, #1
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b06      	cmp	r3, #6
 8003c3a:	d9ef      	bls.n	8003c1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c3c:	480d      	ldr	r0, [pc, #52]	@ (8003c74 <prvInitialiseTaskLists+0x64>)
 8003c3e:	f7ff fadb 	bl	80031f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c42:	480d      	ldr	r0, [pc, #52]	@ (8003c78 <prvInitialiseTaskLists+0x68>)
 8003c44:	f7ff fad8 	bl	80031f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c48:	480c      	ldr	r0, [pc, #48]	@ (8003c7c <prvInitialiseTaskLists+0x6c>)
 8003c4a:	f7ff fad5 	bl	80031f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c4e:	480c      	ldr	r0, [pc, #48]	@ (8003c80 <prvInitialiseTaskLists+0x70>)
 8003c50:	f7ff fad2 	bl	80031f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c54:	480b      	ldr	r0, [pc, #44]	@ (8003c84 <prvInitialiseTaskLists+0x74>)
 8003c56:	f7ff facf 	bl	80031f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <prvInitialiseTaskLists+0x78>)
 8003c5c:	4a05      	ldr	r2, [pc, #20]	@ (8003c74 <prvInitialiseTaskLists+0x64>)
 8003c5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c60:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <prvInitialiseTaskLists+0x7c>)
 8003c62:	4a05      	ldr	r2, [pc, #20]	@ (8003c78 <prvInitialiseTaskLists+0x68>)
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000728 	.word	0x20000728
 8003c74:	200007b4 	.word	0x200007b4
 8003c78:	200007c8 	.word	0x200007c8
 8003c7c:	200007e4 	.word	0x200007e4
 8003c80:	200007f8 	.word	0x200007f8
 8003c84:	20000810 	.word	0x20000810
 8003c88:	200007dc 	.word	0x200007dc
 8003c8c:	200007e0 	.word	0x200007e0

08003c90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c96:	e019      	b.n	8003ccc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c98:	f000 f9f0 	bl	800407c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <prvCheckTasksWaitingTermination+0x50>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fb2b 	bl	8003304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <prvCheckTasksWaitingTermination+0x54>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce4 <prvCheckTasksWaitingTermination+0x54>)
 8003cb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <prvCheckTasksWaitingTermination+0x58>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce8 <prvCheckTasksWaitingTermination+0x58>)
 8003cc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cc2:	f000 fa0b 	bl	80040dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f810 	bl	8003cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <prvCheckTasksWaitingTermination+0x58>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e1      	bne.n	8003c98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200007f8 	.word	0x200007f8
 8003ce4:	20000824 	.word	0x20000824
 8003ce8:	2000080c 	.word	0x2000080c

08003cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fb44 	bl	8004390 <vPortFree>
				vPortFree( pxTCB );
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fb41 	bl	8004390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d0e:	e019      	b.n	8003d44 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d103      	bne.n	8003d22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fb38 	bl	8004390 <vPortFree>
	}
 8003d20:	e010      	b.n	8003d44 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d00b      	beq.n	8003d44 <prvDeleteTCB+0x58>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <prvDeleteTCB+0x54>
	}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d52:	4b0e      	ldr	r3, [pc, #56]	@ (8003d8c <prvResetNextTaskUnblockTime+0x40>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <prvResetNextTaskUnblockTime+0x14>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <prvResetNextTaskUnblockTime+0x16>
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <prvResetNextTaskUnblockTime+0x44>)
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d6e:	e008      	b.n	8003d82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d70:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <prvResetNextTaskUnblockTime+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4a04      	ldr	r2, [pc, #16]	@ (8003d90 <prvResetNextTaskUnblockTime+0x44>)
 8003d80:	6013      	str	r3, [r2, #0]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	200007dc 	.word	0x200007dc
 8003d90:	20000844 	.word	0x20000844

08003d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <xTaskGetSchedulerState+0x34>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003da2:	2301      	movs	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	e008      	b.n	8003dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da8:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <xTaskGetSchedulerState+0x38>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003db0:	2302      	movs	r3, #2
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e001      	b.n	8003dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dba:	687b      	ldr	r3, [r7, #4]
	}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000830 	.word	0x20000830
 8003dcc:	2000084c 	.word	0x2000084c

08003dd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dda:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003de0:	4b28      	ldr	r3, [pc, #160]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fa8c 	bl	8003304 <uxListRemove>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003df2:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	2201      	movs	r2, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	4b21      	ldr	r3, [pc, #132]	@ (8003e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4013      	ands	r3, r2
 8003e06:	4a20      	ldr	r2, [pc, #128]	@ (8003e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d10a      	bne.n	8003e28 <prvAddCurrentTaskToDelayedList+0x58>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e18:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	481a      	ldr	r0, [pc, #104]	@ (8003e8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e22:	f7ff fa14 	bl	800324e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e26:	e026      	b.n	8003e76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e30:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d209      	bcs.n	8003e54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e40:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7ff fa21 	bl	8003294 <vListInsert>
}
 8003e52:	e010      	b.n	8003e76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e54:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7ff fa17 	bl	8003294 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e66:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d202      	bcs.n	8003e76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e70:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6013      	str	r3, [r2, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000828 	.word	0x20000828
 8003e84:	20000724 	.word	0x20000724
 8003e88:	2000082c 	.word	0x2000082c
 8003e8c:	20000810 	.word	0x20000810
 8003e90:	200007e0 	.word	0x200007e0
 8003e94:	200007dc 	.word	0x200007dc
 8003e98:	20000844 	.word	0x20000844

08003e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b04      	subs	r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b04      	subs	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ecc:	4a08      	ldr	r2, [pc, #32]	@ (8003ef0 <pxPortInitialiseStack+0x54>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3b14      	subs	r3, #20
 8003ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b20      	subs	r3, #32
 8003ee2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	08003ef5 	.word	0x08003ef5

08003ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003efe:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <prvTaskExitError+0x54>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d00b      	beq.n	8003f20 <prvTaskExitError+0x2c>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60fb      	str	r3, [r7, #12]
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <prvTaskExitError+0x28>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60bb      	str	r3, [r7, #8]
}
 8003f32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f34:	bf00      	nop
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0fc      	beq.n	8003f36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	2000000c 	.word	0x2000000c
 8003f4c:	00000000 	.word	0x00000000

08003f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f50:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <pxCurrentTCBConst2>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f5a:	f380 8809 	msr	PSP, r0
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8811 	msr	BASEPRI, r0
 8003f6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f6e:	4770      	bx	lr

08003f70 <pxCurrentTCBConst2>:
 8003f70:	20000724 	.word	0x20000724
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop

08003f78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f78:	4806      	ldr	r0, [pc, #24]	@ (8003f94 <prvPortStartFirstTask+0x1c>)
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	6800      	ldr	r0, [r0, #0]
 8003f7e:	f380 8808 	msr	MSP, r0
 8003f82:	b662      	cpsie	i
 8003f84:	b661      	cpsie	f
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	df00      	svc	0
 8003f90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f92:	bf00      	nop
 8003f94:	e000ed08 	.word	0xe000ed08

08003f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f9e:	4b32      	ldr	r3, [pc, #200]	@ (8004068 <xPortStartScheduler+0xd0>)
 8003fa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	22ff      	movs	r2, #255	@ 0xff
 8003fae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800406c <xPortStartScheduler+0xd4>)
 8003fc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8004070 <xPortStartScheduler+0xd8>)
 8003fc8:	2207      	movs	r2, #7
 8003fca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fcc:	e009      	b.n	8003fe2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003fce:	4b28      	ldr	r3, [pc, #160]	@ (8004070 <xPortStartScheduler+0xd8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	4a26      	ldr	r2, [pc, #152]	@ (8004070 <xPortStartScheduler+0xd8>)
 8003fd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fea:	2b80      	cmp	r3, #128	@ 0x80
 8003fec:	d0ef      	beq.n	8003fce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fee:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <xPortStartScheduler+0xd8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f1c3 0307 	rsb	r3, r3, #7
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d00b      	beq.n	8004012 <xPortStartScheduler+0x7a>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60bb      	str	r3, [r7, #8]
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004012:	4b17      	ldr	r3, [pc, #92]	@ (8004070 <xPortStartScheduler+0xd8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <xPortStartScheduler+0xd8>)
 800401a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800401c:	4b14      	ldr	r3, [pc, #80]	@ (8004070 <xPortStartScheduler+0xd8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004024:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <xPortStartScheduler+0xd8>)
 8004026:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004030:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <xPortStartScheduler+0xdc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0f      	ldr	r2, [pc, #60]	@ (8004074 <xPortStartScheduler+0xdc>)
 8004036:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800403a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800403c:	4b0d      	ldr	r3, [pc, #52]	@ (8004074 <xPortStartScheduler+0xdc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0c      	ldr	r2, [pc, #48]	@ (8004074 <xPortStartScheduler+0xdc>)
 8004042:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004046:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004048:	f000 f8b8 	bl	80041bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800404c:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <xPortStartScheduler+0xe0>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004052:	f7ff ff91 	bl	8003f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004056:	f7ff fd67 	bl	8003b28 <vTaskSwitchContext>
	prvTaskExitError();
 800405a:	f7ff ff4b 	bl	8003ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	e000e400 	.word	0xe000e400
 800406c:	20000850 	.word	0x20000850
 8004070:	20000854 	.word	0x20000854
 8004074:	e000ed20 	.word	0xe000ed20
 8004078:	2000000c 	.word	0x2000000c

0800407c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	607b      	str	r3, [r7, #4]
}
 8004094:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004096:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <vPortEnterCritical+0x58>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <vPortEnterCritical+0x58>)
 800409e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <vPortEnterCritical+0x58>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d110      	bne.n	80040ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040a8:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <vPortEnterCritical+0x5c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <vPortEnterCritical+0x4e>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	603b      	str	r3, [r7, #0]
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <vPortEnterCritical+0x4a>
	}
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	2000000c 	.word	0x2000000c
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <vPortExitCritical+0x50>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <vPortExitCritical+0x26>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	607b      	str	r3, [r7, #4]
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	e7fd      	b.n	80040fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004102:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <vPortExitCritical+0x50>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3b01      	subs	r3, #1
 8004108:	4a08      	ldr	r2, [pc, #32]	@ (800412c <vPortExitCritical+0x50>)
 800410a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800410c:	4b07      	ldr	r3, [pc, #28]	@ (800412c <vPortExitCritical+0x50>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <vPortExitCritical+0x44>
 8004114:	2300      	movs	r3, #0
 8004116:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800411e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000000c 	.word	0x2000000c

08004130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004130:	f3ef 8009 	mrs	r0, PSP
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <pxCurrentTCBConst>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004140:	6010      	str	r0, [r2, #0]
 8004142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004146:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800414a:	f380 8811 	msr	BASEPRI, r0
 800414e:	f7ff fceb 	bl	8003b28 <vTaskSwitchContext>
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8811 	msr	BASEPRI, r0
 800415a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	6808      	ldr	r0, [r1, #0]
 8004162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004166:	f380 8809 	msr	PSP, r0
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	4770      	bx	lr

08004170 <pxCurrentTCBConst>:
 8004170:	20000724 	.word	0x20000724
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	607b      	str	r3, [r7, #4]
}
 8004190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004192:	f7ff fc0b 	bl	80039ac <xTaskIncrementTick>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <xPortSysTickHandler+0x40>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f383 8811 	msr	BASEPRI, r3
}
 80041ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041c0:	4b0a      	ldr	r3, [pc, #40]	@ (80041ec <vPortSetupTimerInterrupt+0x30>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041c6:	4b0a      	ldr	r3, [pc, #40]	@ (80041f0 <vPortSetupTimerInterrupt+0x34>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <vPortSetupTimerInterrupt+0x38>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <vPortSetupTimerInterrupt+0x3c>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	4a08      	ldr	r2, [pc, #32]	@ (80041fc <vPortSetupTimerInterrupt+0x40>)
 80041da:	3b01      	subs	r3, #1
 80041dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041de:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <vPortSetupTimerInterrupt+0x30>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	e000e010 	.word	0xe000e010
 80041f0:	e000e018 	.word	0xe000e018
 80041f4:	20000000 	.word	0x20000000
 80041f8:	10624dd3 	.word	0x10624dd3
 80041fc:	e000e014 	.word	0xe000e014

08004200 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800420c:	f7ff fb14 	bl	8003838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004210:	4b5a      	ldr	r3, [pc, #360]	@ (800437c <pvPortMalloc+0x17c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004218:	f000 f916 	bl	8004448 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800421c:	4b58      	ldr	r3, [pc, #352]	@ (8004380 <pvPortMalloc+0x180>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	f040 8090 	bne.w	800434a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01e      	beq.n	800426e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004230:	2208      	movs	r2, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	2b00      	cmp	r3, #0
 8004240:	d015      	beq.n	800426e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f023 0307 	bic.w	r3, r3, #7
 8004248:	3308      	adds	r3, #8
 800424a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <pvPortMalloc+0x6e>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	617b      	str	r3, [r7, #20]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d06a      	beq.n	800434a <pvPortMalloc+0x14a>
 8004274:	4b43      	ldr	r3, [pc, #268]	@ (8004384 <pvPortMalloc+0x184>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d865      	bhi.n	800434a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800427e:	4b42      	ldr	r3, [pc, #264]	@ (8004388 <pvPortMalloc+0x188>)
 8004280:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004282:	4b41      	ldr	r3, [pc, #260]	@ (8004388 <pvPortMalloc+0x188>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004288:	e004      	b.n	8004294 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d903      	bls.n	80042a6 <pvPortMalloc+0xa6>
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f1      	bne.n	800428a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042a6:	4b35      	ldr	r3, [pc, #212]	@ (800437c <pvPortMalloc+0x17c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d04c      	beq.n	800434a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2208      	movs	r2, #8
 80042b6:	4413      	add	r3, r2
 80042b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	1ad2      	subs	r2, r2, r3
 80042ca:	2308      	movs	r3, #8
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d920      	bls.n	8004314 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <pvPortMalloc+0xfc>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	613b      	str	r3, [r7, #16]
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	1ad2      	subs	r2, r2, r3
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800430e:	69b8      	ldr	r0, [r7, #24]
 8004310:	f000 f8fc 	bl	800450c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004314:	4b1b      	ldr	r3, [pc, #108]	@ (8004384 <pvPortMalloc+0x184>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <pvPortMalloc+0x184>)
 8004320:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004322:	4b18      	ldr	r3, [pc, #96]	@ (8004384 <pvPortMalloc+0x184>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b19      	ldr	r3, [pc, #100]	@ (800438c <pvPortMalloc+0x18c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d203      	bcs.n	8004336 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <pvPortMalloc+0x184>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a16      	ldr	r2, [pc, #88]	@ (800438c <pvPortMalloc+0x18c>)
 8004334:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <pvPortMalloc+0x180>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	431a      	orrs	r2, r3
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800434a:	f7ff fa83 	bl	8003854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <pvPortMalloc+0x170>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60fb      	str	r3, [r7, #12]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <pvPortMalloc+0x16c>
	return pvReturn;
 8004370:	69fb      	ldr	r3, [r7, #28]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3728      	adds	r7, #40	@ 0x28
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20001460 	.word	0x20001460
 8004380:	2000146c 	.word	0x2000146c
 8004384:	20001464 	.word	0x20001464
 8004388:	20001458 	.word	0x20001458
 800438c:	20001468 	.word	0x20001468

08004390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04a      	beq.n	8004438 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043a2:	2308      	movs	r3, #8
 80043a4:	425b      	negs	r3, r3
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4413      	add	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <vPortFree+0xb0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <vPortFree+0x46>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	e7fd      	b.n	80043d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <vPortFree+0x66>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	60bb      	str	r3, [r7, #8]
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	e7fd      	b.n	80043f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <vPortFree+0xb0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d019      	beq.n	8004438 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d115      	bne.n	8004438 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <vPortFree+0xb0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	43db      	mvns	r3, r3
 8004416:	401a      	ands	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800441c:	f7ff fa0c 	bl	8003838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <vPortFree+0xb4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4413      	add	r3, r2
 800442a:	4a06      	ldr	r2, [pc, #24]	@ (8004444 <vPortFree+0xb4>)
 800442c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800442e:	6938      	ldr	r0, [r7, #16]
 8004430:	f000 f86c 	bl	800450c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004434:	f7ff fa0e 	bl	8003854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004438:	bf00      	nop
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	2000146c 	.word	0x2000146c
 8004444:	20001464 	.word	0x20001464

08004448 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800444e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004452:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004454:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <prvHeapInit+0xac>)
 8004456:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3307      	adds	r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <prvHeapInit+0xac>)
 8004478:	4413      	add	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004480:	4a1d      	ldr	r2, [pc, #116]	@ (80044f8 <prvHeapInit+0xb0>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004486:	4b1c      	ldr	r3, [pc, #112]	@ (80044f8 <prvHeapInit+0xb0>)
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4413      	add	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004494:	2208      	movs	r2, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a15      	ldr	r2, [pc, #84]	@ (80044fc <prvHeapInit+0xb4>)
 80044a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044aa:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <prvHeapInit+0xb4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <prvHeapInit+0xb4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <prvHeapInit+0xb4>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004500 <prvHeapInit+0xb8>)
 80044d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a09      	ldr	r2, [pc, #36]	@ (8004504 <prvHeapInit+0xbc>)
 80044de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044e0:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <prvHeapInit+0xc0>)
 80044e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000858 	.word	0x20000858
 80044f8:	20001458 	.word	0x20001458
 80044fc:	20001460 	.word	0x20001460
 8004500:	20001468 	.word	0x20001468
 8004504:	20001464 	.word	0x20001464
 8004508:	2000146c 	.word	0x2000146c

0800450c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004514:	4b27      	ldr	r3, [pc, #156]	@ (80045b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e002      	b.n	8004520 <prvInsertBlockIntoFreeList+0x14>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d8f7      	bhi.n	800451a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d108      	bne.n	800454e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	441a      	add	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d118      	bne.n	8004594 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <prvInsertBlockIntoFreeList+0xac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d00d      	beq.n	800458a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e008      	b.n	800459c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <prvInsertBlockIntoFreeList+0xac>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e003      	b.n	800459c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d002      	beq.n	80045aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	20001458 	.word	0x20001458
 80045b8:	20001460 	.word	0x20001460

080045bc <memset>:
 80045bc:	4603      	mov	r3, r0
 80045be:	4402      	add	r2, r0
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d100      	bne.n	80045c6 <memset+0xa>
 80045c4:	4770      	bx	lr
 80045c6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ca:	e7f9      	b.n	80045c0 <memset+0x4>

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	2600      	movs	r6, #0
 80045d0:	4d0c      	ldr	r5, [pc, #48]	@ (8004604 <__libc_init_array+0x38>)
 80045d2:	4c0d      	ldr	r4, [pc, #52]	@ (8004608 <__libc_init_array+0x3c>)
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	f000 f81a 	bl	8004614 <_init>
 80045e0:	2600      	movs	r6, #0
 80045e2:	4d0a      	ldr	r5, [pc, #40]	@ (800460c <__libc_init_array+0x40>)
 80045e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004610 <__libc_init_array+0x44>)
 80045e6:	1b64      	subs	r4, r4, r5
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	0800542c 	.word	0x0800542c
 8004608:	0800542c 	.word	0x0800542c
 800460c:	0800542c 	.word	0x0800542c
 8004610:	08005430 	.word	0x08005430

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
