
Ford_unfocused.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004128  08004128  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004128  08004128  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004128  08004128  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004130  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  20000018  08004144  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200019cc  08004144  000219cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abb0  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd5  00000000  00000000  0002ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002c908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000764  00000000  00000000  0002d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001246d  00000000  00000000  0002da2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b16e  00000000  00000000  0003fe99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088318  00000000  00000000  0004b007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002928  00000000  00000000  000d3320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d5c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080040e0 	.word	0x080040e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080040e0 	.word	0x080040e0

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__gesf2>:
 8000d50:	f04f 3cff 	mov.w	ip, #4294967295
 8000d54:	e006      	b.n	8000d64 <__cmpsf2+0x4>
 8000d56:	bf00      	nop

08000d58 <__lesf2>:
 8000d58:	f04f 0c01 	mov.w	ip, #1
 8000d5c:	e002      	b.n	8000d64 <__cmpsf2+0x4>
 8000d5e:	bf00      	nop

08000d60 <__cmpsf2>:
 8000d60:	f04f 0c01 	mov.w	ip, #1
 8000d64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d74:	bf18      	it	ne
 8000d76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7a:	d011      	beq.n	8000da0 <__cmpsf2+0x40>
 8000d7c:	b001      	add	sp, #4
 8000d7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d82:	bf18      	it	ne
 8000d84:	ea90 0f01 	teqne	r0, r1
 8000d88:	bf58      	it	pl
 8000d8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d8e:	bf88      	it	hi
 8000d90:	17c8      	asrhi	r0, r1, #31
 8000d92:	bf38      	it	cc
 8000d94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d98:	bf18      	it	ne
 8000d9a:	f040 0001 	orrne.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	d102      	bne.n	8000dac <__cmpsf2+0x4c>
 8000da6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000daa:	d105      	bne.n	8000db8 <__cmpsf2+0x58>
 8000dac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000db0:	d1e4      	bne.n	8000d7c <__cmpsf2+0x1c>
 8000db2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000db6:	d0e1      	beq.n	8000d7c <__cmpsf2+0x1c>
 8000db8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_cfrcmple>:
 8000dc0:	4684      	mov	ip, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4661      	mov	r1, ip
 8000dc6:	e7ff      	b.n	8000dc8 <__aeabi_cfcmpeq>

08000dc8 <__aeabi_cfcmpeq>:
 8000dc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dca:	f7ff ffc9 	bl	8000d60 <__cmpsf2>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	bf48      	it	mi
 8000dd2:	f110 0f00 	cmnmi.w	r0, #0
 8000dd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dd8 <__aeabi_fcmpeq>:
 8000dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ddc:	f7ff fff4 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000de0:	bf0c      	ite	eq
 8000de2:	2001      	moveq	r0, #1
 8000de4:	2000      	movne	r0, #0
 8000de6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dea:	bf00      	nop

08000dec <__aeabi_fcmplt>:
 8000dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df0:	f7ff ffea 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000df4:	bf34      	ite	cc
 8000df6:	2001      	movcc	r0, #1
 8000df8:	2000      	movcs	r0, #0
 8000dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfe:	bf00      	nop

08000e00 <__aeabi_fcmple>:
 8000e00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e04:	f7ff ffe0 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000e08:	bf94      	ite	ls
 8000e0a:	2001      	movls	r0, #1
 8000e0c:	2000      	movhi	r0, #0
 8000e0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e12:	bf00      	nop

08000e14 <__aeabi_fcmpge>:
 8000e14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e18:	f7ff ffd2 	bl	8000dc0 <__aeabi_cfrcmple>
 8000e1c:	bf94      	ite	ls
 8000e1e:	2001      	movls	r0, #1
 8000e20:	2000      	movhi	r0, #0
 8000e22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e26:	bf00      	nop

08000e28 <__aeabi_fcmpgt>:
 8000e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e2c:	f7ff ffc8 	bl	8000dc0 <__aeabi_cfrcmple>
 8000e30:	bf34      	ite	cc
 8000e32:	2001      	movcc	r0, #1
 8000e34:	2000      	movcs	r0, #0
 8000e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3a:	bf00      	nop

08000e3c <usart_init>:
#include "event_groups.h"
char steering ;
TickType_t lastWakeTime2;

void usart_init()
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<14)|(1<<2)|(1<<0);
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <usart_init+0x50>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <usart_init+0x50>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	f043 0305 	orr.w	r3, r3, #5
 8000e4e:	6193      	str	r3, [r2, #24]
	GPIOA->CRH = 0x444448B4 ;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <usart_init+0x54>)
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <usart_init+0x58>)
 8000e54:	605a      	str	r2, [r3, #4]
	GPIOA->ODR |= (1<<10) ;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <usart_init+0x54>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <usart_init+0x54>)
 8000e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e60:	60d3      	str	r3, [r2, #12]

	USART1->CR1 |= (1<<13) ;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <usart_init+0x5c>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <usart_init+0x5c>)
 8000e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e6c:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 |= (1<<3) ;
	USART1->CR1 |= (1<<2) ;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <usart_init+0x5c>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <usart_init+0x5c>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	60d3      	str	r3, [r2, #12]
	USART1->BRR = 833 ; // BaudRate 9600
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <usart_init+0x5c>)
 8000e7c:	f240 3241 	movw	r2, #833	; 0x341
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	444448b4 	.word	0x444448b4
 8000e98:	40013800 	.word	0x40013800

08000e9c <usart_rx>:

void usart_rx(void* data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	lastWakeTime2 = xTaskGetTickCount();
 8000ea4:	f001 fdea 	bl	8002a7c <xTaskGetTickCount>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <usart_rx+0x40>)
 8000eac:	6013      	str	r3, [r2, #0]
	while(1){
	while(!(USART1->SR & (1<<5))) ;
 8000eae:	bf00      	nop
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <usart_rx+0x44>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0320 	and.w	r3, r3, #32
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f9      	beq.n	8000eb0 <usart_rx+0x14>
	steering = USART1->DR ;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <usart_rx+0x44>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <usart_rx+0x48>)
 8000ec4:	701a      	strb	r2, [r3, #0]
	USART1->SR &= ~(1<<5) ;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <usart_rx+0x44>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <usart_rx+0x44>)
 8000ecc:	f023 0320 	bic.w	r3, r3, #32
 8000ed0:	6013      	str	r3, [r2, #0]
	vTaskDelayUntil(&lastWakeTime2,pdMS_TO_TICKS(5));
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	4801      	ldr	r0, [pc, #4]	; (8000edc <usart_rx+0x40>)
 8000ed6:	f001 fc41 	bl	800275c <vTaskDelayUntil>
	while(!(USART1->SR & (1<<5))) ;
 8000eda:	e7e8      	b.n	8000eae <usart_rx+0x12>
 8000edc:	20000038 	.word	0x20000038
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	20000034 	.word	0x20000034

08000ee8 <get_steering>:
	}
}

char get_steering(){
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	return steering;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <get_steering+0x10>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000034 	.word	0x20000034

08000efc <main>:
#include "timers.h"
#include "event_groups.h"
#include "motor_control.h"
#include "USART_rx.h"

int main(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af02      	add	r7, sp, #8
	usart_init();
 8000f02:	f7ff ff9b 	bl	8000e3c <usart_init>
		start_engine();
 8000f06:	f000 fb19 	bl	800153c <start_engine>
		xTaskCreate(usart_rx,"BLUETOOTH",128,NULL,tskIDLE_PRIORITY+1,NULL);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	490a      	ldr	r1, [pc, #40]	; (8000f40 <main+0x44>)
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <main+0x48>)
 8000f1a:	f001 fae3 	bl	80024e4 <xTaskCreate>
		xTaskCreate(car_process,"Car Drive",128,NULL,tskIDLE_PRIORITY+2,NULL);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	2302      	movs	r3, #2
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	4907      	ldr	r1, [pc, #28]	; (8000f48 <main+0x4c>)
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <main+0x50>)
 8000f2e:	f001 fad9 	bl	80024e4 <xTaskCreate>

		vTaskStartScheduler();
 8000f32:	f001 fc91 	bl	8002858 <vTaskStartScheduler>
 8000f36:	2300      	movs	r3, #0

}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080040f8 	.word	0x080040f8
 8000f44:	08000e9d 	.word	0x08000e9d
 8000f48:	08004104 	.word	0x08004104
 8000f4c:	080016ad 	.word	0x080016ad

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4906      	ldr	r1, [pc, #24]	; (8000f84 <__NVIC_EnableIRQ+0x34>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <TIM2_IC_PWM_init>:
double integral_R=0,integral_L=0;
double previos_error_R,previos_error_L;
float RPM_R=0,RPM_L=0,error_R,error_L,duty_R,duty_L;
TickType_t lastWakeTime1;
/*********************************************************  */
void TIM2_IC_PWM_init(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN ; //EN TIM2 clk
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <TIM2_IC_PWM_init+0x8c>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4a20      	ldr	r2, [pc, #128]	; (8001014 <TIM2_IC_PWM_init+0x8c>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	61d3      	str	r3, [r2, #28]
	TIM2->ARR = 0xffff;
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 = 0x0021; //EN PWM1 on TIM3 CH1,CH2 ,preload EN
 8000fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa6:	2221      	movs	r2, #33	; 0x21
 8000fa8:	619a      	str	r2, [r3, #24]
	TIM2->SMCR = 0x0057;
 8000faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fae:	2257      	movs	r2, #87	; 0x57
 8000fb0:	609a      	str	r2, [r3, #8]
	TIM2->CNT = 0;
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
	//TIM2->CR1 |= TIM_CR1_ARPE; //en auto reload/preload
    TIM2->CR1 &= ~TIM_CR1_DIR ; // up counting
 8000fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc4:	f023 0310 	bic.w	r3, r3, #16
 8000fc8:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= TIM_CR1_URS ; // only over/under flow generates update event
 8000fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6013      	str	r3, [r2, #0]
    //NVIC_EnableIRQ(TIM2_IRQn);//en tim2 interrupts
    //TIM2->DIER |= (TIM_DIER_CC2IE | TIM_DIER_UIE);  //Enable enterupt for CH3,CH4,overflow
    TIM2->CCER &= ~TIM_CCER_CC1P; // positive edge on TIM3_CH3
 8000fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe4:	f023 0302 	bic.w	r3, r3, #2
 8000fe8:	6213      	str	r3, [r2, #32]
   	//TIM2->EGR |= TIM_EGR_UG ; //Update generation
   	TIM2->CCER |= (TIM_CCER_CC1E) ; //TIM3 CH1,CH2, EN
 8000fea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
   	TIM2->CR1 |= TIM_CR1_CEN; // EN TIM3
 8000ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6013      	str	r3, [r2, #0]

}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <TIM3_IC_PWM_init>:

void TIM3_IC_PWM_init(){
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN ; //EN TIM2 clk
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <TIM3_IC_PWM_init+0x70>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <TIM3_IC_PWM_init+0x70>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	61d3      	str	r3, [r2, #28]
	TIM3->ARR = 0xFFFF;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <TIM3_IC_PWM_init+0x74>)
 800102a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCMR1 = 0x0021; //EN PWM1 on TIM3 CH1,CH2 ,preload EN
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001032:	2221      	movs	r2, #33	; 0x21
 8001034:	619a      	str	r2, [r3, #24]
	TIM3->SMCR = 0x0057;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001038:	2257      	movs	r2, #87	; 0x57
 800103a:	609a      	str	r2, [r3, #8]
	TIM3->CNT = 0;
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <TIM3_IC_PWM_init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
	//TIM3->CR1 |= TIM_CR1_ARPE; //en auto reload/preload
    TIM3->CR1 &= ~TIM_CR1_DIR ; // up counting
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001048:	f023 0310 	bic.w	r3, r3, #16
 800104c:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_URS ; // only over/under flow generates update event
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6013      	str	r3, [r2, #0]
   // NVIC_EnableIRQ(TIM3_IRQn);//en tim2 interrupts
    //TIM3->DIER |= (TIM_DIER_CC2IE | TIM_DIER_UIE);  //Enable enterupt for CH3,CH4,overflow
    TIM3->CCER &= ~TIM_CCER_CC1P; // positive edge on TIM3_CH3
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <TIM3_IC_PWM_init+0x74>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001060:	f023 0302 	bic.w	r3, r3, #2
 8001064:	6213      	str	r3, [r2, #32]
	//TIM3->EGR |= TIM_EGR_UG ; //Update generation
	TIM3->CCER |= (TIM_CCER_CC1E) ; //TIM3 CH1,CH2, EN
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <TIM3_IC_PWM_init+0x74>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_CEN; // EN TIM3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <TIM3_IC_PWM_init+0x74>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40000400 	.word	0x40000400

08001090 <PWM_init>:

void PWM_init(){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; // ENABLE TIMER CLK
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <PWM_init+0x60>)
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <PWM_init+0x60>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	61d3      	str	r3, [r2, #28]
    TIM4->PSC = 20-1;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <PWM_init+0x64>)
 80010a2:	2213      	movs	r2, #19
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = 0xFFFF;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <PWM_init+0x64>)
 80010a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CCMR2 = 0x6868; // PWM on TIM4 CH1,CH2
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <PWM_init+0x64>)
 80010b0:	f646 0268 	movw	r2, #26728	; 0x6868
 80010b4:	61da      	str	r2, [r3, #28]
    TIM4->EGR |= TIM_EGR_UG ; //Update generation
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <PWM_init+0x64>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <PWM_init+0x64>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6153      	str	r3, [r2, #20]
    NVIC_EnableIRQ(TIM4_IRQn);//en tim4 interrupts
 80010c2:	201e      	movs	r0, #30
 80010c4:	f7ff ff44 	bl	8000f50 <__NVIC_EnableIRQ>
    TIM4->DIER |= (TIM_DIER_UIE);
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <PWM_init+0x64>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <PWM_init+0x64>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	60d3      	str	r3, [r2, #12]
    TIM4->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC4E );
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <PWM_init+0x64>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <PWM_init+0x64>)
 80010da:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80010de:	6213      	str	r3, [r2, #32]
    TIM4->CR1 |= TIM_CR1_CEN;
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <PWM_init+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <PWM_init+0x64>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40000800 	.word	0x40000800

080010f8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
	period_R = TIM2->CNT;
 80010fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	461a      	mov	r2, r3
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <TIM4_IRQHandler+0x3c>)
 8001106:	601a      	str	r2, [r3, #0]
	period_L = TIM3->CNT;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <TIM4_IRQHandler+0x40>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	461a      	mov	r2, r3
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <TIM4_IRQHandler+0x44>)
 8001110:	601a      	str	r2, [r3, #0]
	TIM2->CNT =0;
 8001112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT =0;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <TIM4_IRQHandler+0x40>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->SR &= ~TIM_SR_UIF;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <TIM4_IRQHandler+0x48>)
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <TIM4_IRQHandler+0x48>)
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	6113      	str	r3, [r2, #16]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	2000003c 	.word	0x2000003c
 8001138:	40000400 	.word	0x40000400
 800113c:	20000040 	.word	0x20000040
 8001140:	40000800 	.word	0x40000800

08001144 <update_dutyR>:

void update_dutyR(float res){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	if(res > 100){
 800114c:	4913      	ldr	r1, [pc, #76]	; (800119c <update_dutyR+0x58>)
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fe6a 	bl	8000e28 <__aeabi_fcmpgt>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <update_dutyR+0x20>
		TIM4->CCR3= 0xffff;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <update_dutyR+0x5c>)
 800115c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else{
	    TIM4->CCR3 =(uint16_t)((res*0xFFFF)/100.0);
	}
}
 8001162:	e016      	b.n	8001192 <update_dutyR+0x4e>
	    TIM4->CCR3 =(uint16_t)((res*0xFFFF)/100.0);
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <update_dutyR+0x60>)
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7fe fff2 	bl	8000150 <__aeabi_fmul>
 800116c:	4603      	mov	r3, r0
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fa06 	bl	8000580 <__aeabi_f2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <update_dutyR+0x64>)
 800117a:	f7ff fb83 	bl	8000884 <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc65 	bl	8000a54 <__aeabi_d2uiz>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <update_dutyR+0x5c>)
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	42c80000 	.word	0x42c80000
 80011a0:	40000800 	.word	0x40000800
 80011a4:	477fff00 	.word	0x477fff00
 80011a8:	40590000 	.word	0x40590000

080011ac <update_dutyL>:

void update_dutyL(float res){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if(res>100){
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <update_dutyL+0x58>)
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fe36 	bl	8000e28 <__aeabi_fcmpgt>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <update_dutyL+0x20>
		TIM4->CCR4= 0xffff;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <update_dutyL+0x5c>)
 80011c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
	}
	else{
		TIM4->CCR4 = (uint16_t)((res*0xFFFF)/100.0);
	}
}
 80011ca:	e016      	b.n	80011fa <update_dutyL+0x4e>
		TIM4->CCR4 = (uint16_t)((res*0xFFFF)/100.0);
 80011cc:	490f      	ldr	r1, [pc, #60]	; (800120c <update_dutyL+0x60>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7fe ffbe 	bl	8000150 <__aeabi_fmul>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9d2 	bl	8000580 <__aeabi_f2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <update_dutyL+0x64>)
 80011e2:	f7ff fb4f 	bl	8000884 <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc31 	bl	8000a54 <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <update_dutyL+0x5c>)
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	42c80000 	.word	0x42c80000
 8001208:	40000800 	.word	0x40000800
 800120c:	477fff00 	.word	0x477fff00
 8001210:	40590000 	.word	0x40590000
 8001214:	00000000 	.word	0x00000000

08001218 <calc_rpm>:

void calc_rpm(){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	if(period_R != 0)
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <calc_rpm+0xa8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01c      	beq.n	800125e <calc_rpm+0x46>
		RPM_R = (period_R/(20.0*0.16384))*60 ;
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <calc_rpm+0xa8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f997 	bl	800055c <__aeabi_i2d>
 800122e:	a322      	add	r3, pc, #136	; (adr r3, 80012b8 <calc_rpm+0xa0>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff fb26 	bl	8000884 <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <calc_rpm+0xac>)
 8001246:	f7ff f9f3 	bl	8000630 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc1f 	bl	8000a94 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <calc_rpm+0xb0>)
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e003      	b.n	8001266 <calc_rpm+0x4e>
	else
		RPM_R = 0;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <calc_rpm+0xb0>)
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
	if(period_L != 0)
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <calc_rpm+0xb4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01c      	beq.n	80012a8 <calc_rpm+0x90>
		RPM_L = (period_L/(20.0*0.16384))*60 ;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <calc_rpm+0xb4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f972 	bl	800055c <__aeabi_i2d>
 8001278:	a30f      	add	r3, pc, #60	; (adr r3, 80012b8 <calc_rpm+0xa0>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff fb01 	bl	8000884 <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <calc_rpm+0xac>)
 8001290:	f7ff f9ce 	bl	8000630 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fbfa 	bl	8000a94 <__aeabi_d2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <calc_rpm+0xb8>)
 80012a4:	6013      	str	r3, [r2, #0]
	else
		RPM_L = 0;

}
 80012a6:	e003      	b.n	80012b0 <calc_rpm+0x98>
		RPM_L = 0;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <calc_rpm+0xb8>)
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	f3af 8000 	nop.w
 80012b8:	eb1c432d 	.word	0xeb1c432d
 80012bc:	400a36e2 	.word	0x400a36e2
 80012c0:	2000003c 	.word	0x2000003c
 80012c4:	404e0000 	.word	0x404e0000
 80012c8:	20000068 	.word	0x20000068
 80012cc:	20000040 	.word	0x20000040
 80012d0:	2000006c 	.word	0x2000006c
 80012d4:	00000000 	.word	0x00000000

080012d8 <PID_controller>:

void PID_controller(){
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	af00      	add	r7, sp, #0

	integral_R = (error_R + previos_error_R)/2 * dt; //calculating integral part
 80012dc:	4b7c      	ldr	r3, [pc, #496]	; (80014d0 <PID_controller+0x1f8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f94d 	bl	8000580 <__aeabi_f2d>
 80012e6:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <PID_controller+0x1fc>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7fe ffea 	bl	80002c4 <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001300:	f7ff fac0 	bl	8000884 <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <PID_controller+0x200>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f98d 	bl	8000630 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4970      	ldr	r1, [pc, #448]	; (80014dc <PID_controller+0x204>)
 800131c:	e9c1 2300 	strd	r2, r3, [r1]
	duty_R = error_R * Kp + Ki * integral_R + Kd *(error_R - previos_error_R)/dt; //updating duting cycle
 8001320:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <PID_controller+0x1f8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f92b 	bl	8000580 <__aeabi_f2d>
 800132a:	a365      	add	r3, pc, #404	; (adr r3, 80014c0 <PID_controller+0x1e8>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f97e 	bl	8000630 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	4b67      	ldr	r3, [pc, #412]	; (80014dc <PID_controller+0x204>)
 800133e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001342:	a361      	add	r3, pc, #388	; (adr r3, 80014c8 <PID_controller+0x1f0>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f972 	bl	8000630 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7fe ffb6 	bl	80002c4 <__adddf3>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4614      	mov	r4, r2
 800135e:	461d      	mov	r5, r3
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <PID_controller+0x1f8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f90b 	bl	8000580 <__aeabi_f2d>
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <PID_controller+0x1fc>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7fe ffa6 	bl	80002c0 <__aeabi_dsub>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <PID_controller+0x208>)
 8001382:	f7ff f955 	bl	8000630 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <PID_controller+0x200>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff fa76 	bl	8000884 <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7fe ff90 	bl	80002c4 <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fb72 	bl	8000a94 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <PID_controller+0x20c>)
 80013b4:	6013      	str	r3, [r2, #0]
	previos_error_R = error_R;
 80013b6:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <PID_controller+0x1f8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8e0 	bl	8000580 <__aeabi_f2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4943      	ldr	r1, [pc, #268]	; (80014d4 <PID_controller+0x1fc>)
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]
	integral_L = (error_R + previos_error_R)/2 * dt;
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <PID_controller+0x1f8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d6 	bl	8000580 <__aeabi_f2d>
 80013d4:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <PID_controller+0x1fc>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe ff73 	bl	80002c4 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ee:	f7ff fa49 	bl	8000884 <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <PID_controller+0x200>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f916 	bl	8000630 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <PID_controller+0x210>)
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
	duty_L = error_L * Kp + Ki * integral_L + Kd *(error_L - previos_error_L)/dt;
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <PID_controller+0x214>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8b4 	bl	8000580 <__aeabi_f2d>
 8001418:	a329      	add	r3, pc, #164	; (adr r3, 80014c0 <PID_controller+0x1e8>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f907 	bl	8000630 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4614      	mov	r4, r2
 8001428:	461d      	mov	r5, r3
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <PID_controller+0x210>)
 800142c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001430:	a325      	add	r3, pc, #148	; (adr r3, 80014c8 <PID_controller+0x1f0>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8fb 	bl	8000630 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4620      	mov	r0, r4
 8001440:	4629      	mov	r1, r5
 8001442:	f7fe ff3f 	bl	80002c4 <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4614      	mov	r4, r2
 800144c:	461d      	mov	r5, r3
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <PID_controller+0x214>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f894 	bl	8000580 <__aeabi_f2d>
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <PID_controller+0x218>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7fe ff2f 	bl	80002c0 <__aeabi_dsub>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <PID_controller+0x208>)
 8001470:	f7ff f8de 	bl	8000630 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <PID_controller+0x200>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f9ff 	bl	8000884 <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe ff19 	bl	80002c4 <__adddf3>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fafb 	bl	8000a94 <__aeabi_d2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <PID_controller+0x21c>)
 80014a2:	6013      	str	r3, [r2, #0]
	previos_error_L = error_L;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <PID_controller+0x214>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f869 	bl	8000580 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	490f      	ldr	r1, [pc, #60]	; (80014f0 <PID_controller+0x218>)
 80014b4:	e9c1 2300 	strd	r2, r3, [r1]


}
 80014b8:	bf00      	nop
 80014ba:	bdb0      	pop	{r4, r5, r7, pc}
 80014bc:	f3af 8000 	nop.w
 80014c0:	66666666 	.word	0x66666666
 80014c4:	3fe66666 	.word	0x3fe66666
 80014c8:	47ae147b 	.word	0x47ae147b
 80014cc:	3f847ae1 	.word	0x3f847ae1
 80014d0:	20000070 	.word	0x20000070
 80014d4:	20000058 	.word	0x20000058
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000048 	.word	0x20000048
 80014e0:	3fe00000 	.word	0x3fe00000
 80014e4:	20000078 	.word	0x20000078
 80014e8:	20000050 	.word	0x20000050
 80014ec:	20000074 	.word	0x20000074
 80014f0:	20000060 	.word	0x20000060
 80014f4:	2000007c 	.word	0x2000007c

080014f8 <GPIO_init>:

void GPIO_init(){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN);
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <GPIO_init+0x30>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <GPIO_init+0x30>)
 8001502:	f043 030c 	orr.w	r3, r3, #12
 8001506:	6193      	str	r3, [r2, #24]
	GPIOB->CRH = 0x444444BB;//PB8, PB9 PWM for right and left motor
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <GPIO_init+0x34>)
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <GPIO_init+0x38>)
 800150c:	605a      	str	r2, [r3, #4]
	GPIOA->CRL = 0x48333348; //PA0, PA6 input from encoder, PA2-PA5 direction for motors
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <GPIO_init+0x3c>)
 8001510:	4a09      	ldr	r2, [pc, #36]	; (8001538 <GPIO_init+0x40>)
 8001512:	601a      	str	r2, [r3, #0]
    GPIOA->ODR &= ~((1<<0) | (1<<6));
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <GPIO_init+0x3c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <GPIO_init+0x3c>)
 800151a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	40021000 	.word	0x40021000
 800152c:	40010c00 	.word	0x40010c00
 8001530:	444444bb 	.word	0x444444bb
 8001534:	40010800 	.word	0x40010800
 8001538:	48333348 	.word	0x48333348

0800153c <start_engine>:

void start_engine(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
    GPIO_init();
 8001540:	f7ff ffda 	bl	80014f8 <GPIO_init>
    TIM3_IC_PWM_init();
 8001544:	f7ff fd68 	bl	8001018 <TIM3_IC_PWM_init>
    TIM2_IC_PWM_init();
 8001548:	f7ff fd1e 	bl	8000f88 <TIM2_IC_PWM_init>
    PWM_init();
 800154c:	f7ff fda0 	bl	8001090 <PWM_init>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <drive>:
void drive(enum gear_box desired_rpm_R , enum gear_box desired_rpm_L,enum direction dir){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	460b      	mov	r3, r1
 8001560:	80bb      	strh	r3, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	70fb      	strb	r3, [r7, #3]
    	calc_rpm();
 8001566:	f7ff fe57 	bl	8001218 <calc_rpm>
    	update_direction(dir);
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f859 	bl	8001624 <update_direction>
    	error_R = desired_rpm_R - RPM_R;
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fb97 	bl	8000ca8 <__aeabi_i2f>
 800157a:	4602      	mov	r2, r0
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <drive+0x8c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4610      	mov	r0, r2
 8001584:	f7ff fada 	bl	8000b3c <__aeabi_fsub>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <drive+0x90>)
 800158e:	601a      	str	r2, [r3, #0]
    	error_L = desired_rpm_L - RPM_L;
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fb88 	bl	8000ca8 <__aeabi_i2f>
 8001598:	4602      	mov	r2, r0
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <drive+0x94>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	4610      	mov	r0, r2
 80015a2:	f7ff facb 	bl	8000b3c <__aeabi_fsub>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <drive+0x98>)
 80015ac:	601a      	str	r2, [r3, #0]

    	PID_controller();
 80015ae:	f7ff fe93 	bl	80012d8 <PID_controller>
    	update_dutyR(abs_value(duty_R));
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <drive+0x9c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f81e 	bl	80015f8 <abs_value>
 80015bc:	4603      	mov	r3, r0
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fdc0 	bl	8001144 <update_dutyR>
    	update_dutyL(abs_value(duty_L));
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <drive+0xa0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f815 	bl	80015f8 <abs_value>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fdeb 	bl	80011ac <update_dutyL>

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000068 	.word	0x20000068
 80015e4:	20000070 	.word	0x20000070
 80015e8:	2000006c 	.word	0x2000006c
 80015ec:	20000074 	.word	0x20000074
 80015f0:	20000078 	.word	0x20000078
 80015f4:	2000007c 	.word	0x2000007c

080015f8 <abs_value>:

float abs_value(float number){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(number < 0){
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fbf1 	bl	8000dec <__aeabi_fcmplt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <abs_value+0x20>
		number = -1*number;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001616:	607b      	str	r3, [r7, #4]
	}
	return number;
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <update_direction>:

void update_direction(enum direction dir){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(0xf<<2);
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <update_direction+0x84>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <update_direction+0x84>)
 8001634:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8001638:	60d3      	str	r3, [r2, #12]
	switch(dir){
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	3b01      	subs	r3, #1
 800163e:	2b03      	cmp	r3, #3
 8001640:	d826      	bhi.n	8001690 <update_direction+0x6c>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <update_direction+0x24>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	08001659 	.word	0x08001659
 800164c:	08001667 	.word	0x08001667
 8001650:	08001675 	.word	0x08001675
 8001654:	08001683 	.word	0x08001683
	case FORWARD : GPIOA->ODR |= (0b1010<<2); break;
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <update_direction+0x84>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <update_direction+0x84>)
 800165e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001662:	60d3      	str	r3, [r2, #12]
 8001664:	e01b      	b.n	800169e <update_direction+0x7a>
	case BACKWARD : GPIOA->ODR |= (0b0101<<2); break;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <update_direction+0x84>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <update_direction+0x84>)
 800166c:	f043 0314 	orr.w	r3, r3, #20
 8001670:	60d3      	str	r3, [r2, #12]
 8001672:	e014      	b.n	800169e <update_direction+0x7a>
	case RIGHT : GPIOA->ODR |= (0b1011<<2); break;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <update_direction+0x84>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <update_direction+0x84>)
 800167a:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 800167e:	60d3      	str	r3, [r2, #12]
 8001680:	e00d      	b.n	800169e <update_direction+0x7a>
	case LEFT : GPIOA->ODR |= (0b1110<<2); break;
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <update_direction+0x84>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <update_direction+0x84>)
 8001688:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800168c:	60d3      	str	r3, [r2, #12]
 800168e:	e006      	b.n	800169e <update_direction+0x7a>
	default : GPIOA->ODR |= (0b1111<<2);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <update_direction+0x84>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <update_direction+0x84>)
 8001696:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 800169a:	60d3      	str	r3, [r2, #12]
	}
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40010800 	.word	0x40010800

080016ac <car_process>:


void car_process(void* data)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    lastWakeTime1 = xTaskGetTickCount();
 80016b4:	f001 f9e2 	bl	8002a7c <xTaskGetTickCount>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <car_process+0x124>)
 80016bc:	6013      	str	r3, [r2, #0]
	while(1){
	char steering = get_steering();
 80016be:	f7ff fc13 	bl	8000ee8 <get_steering>
 80016c2:	4603      	mov	r3, r0
 80016c4:	72fb      	strb	r3, [r7, #11]
	enum direction dir ;
	enum gear_box speed;
	switch (steering){
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	3b61      	subs	r3, #97	; 0x61
 80016ca:	2b18      	cmp	r3, #24
 80016cc:	d840      	bhi.n	8001750 <car_process+0xa4>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <car_process+0x28>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	0800174b 	.word	0x0800174b
 80016d8:	0800174b 	.word	0x0800174b
 80016dc:	0800174b 	.word	0x0800174b
 80016e0:	08001745 	.word	0x08001745
 80016e4:	08001745 	.word	0x08001745
 80016e8:	08001745 	.word	0x08001745
 80016ec:	08001751 	.word	0x08001751
 80016f0:	08001751 	.word	0x08001751
 80016f4:	08001751 	.word	0x08001751
 80016f8:	08001751 	.word	0x08001751
 80016fc:	08001751 	.word	0x08001751
 8001700:	08001751 	.word	0x08001751
 8001704:	08001751 	.word	0x08001751
 8001708:	08001751 	.word	0x08001751
 800170c:	08001751 	.word	0x08001751
 8001710:	08001751 	.word	0x08001751
 8001714:	08001751 	.word	0x08001751
 8001718:	08001751 	.word	0x08001751
 800171c:	0800173f 	.word	0x0800173f
 8001720:	0800173f 	.word	0x0800173f
 8001724:	0800173f 	.word	0x0800173f
 8001728:	08001751 	.word	0x08001751
 800172c:	08001739 	.word	0x08001739
 8001730:	08001739 	.word	0x08001739
 8001734:	08001739 	.word	0x08001739
	case 'w' :
    case 'w'+1 :
	case 'w'+2 : dir = FORWARD;break;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e00a      	b.n	8001754 <car_process+0xa8>
	case 's' :
	case 's'+1 :
	case 's'+2 : dir = BACKWARD;break;
 800173e:	2302      	movs	r3, #2
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e007      	b.n	8001754 <car_process+0xa8>
	case 'd' :
	case 'd'+1 :
	case 'd'+2 : dir = RIGHT ;break;
 8001744:	2303      	movs	r3, #3
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e004      	b.n	8001754 <car_process+0xa8>
	case 'a' :
	case 'a'+1 :
	case 'a'+2 : dir = LEFT ; break;
 800174a:	2304      	movs	r3, #4
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	e001      	b.n	8001754 <car_process+0xa8>
	default : dir = BRAKE;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
	}
	switch (steering){
 8001754:	7afb      	ldrb	r3, [r7, #11]
 8001756:	3b61      	subs	r3, #97	; 0x61
 8001758:	2b18      	cmp	r3, #24
 800175a:	bf8c      	ite	hi
 800175c:	2201      	movhi	r2, #1
 800175e:	2200      	movls	r2, #0
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	2a00      	cmp	r2, #0
 8001764:	d127      	bne.n	80017b6 <car_process+0x10a>
 8001766:	2201      	movs	r2, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <car_process+0x128>)
 800176e:	401a      	ands	r2, r3
 8001770:	2a00      	cmp	r2, #0
 8001772:	bf14      	ite	ne
 8001774:	2201      	movne	r2, #1
 8001776:	2200      	moveq	r2, #0
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	2a00      	cmp	r2, #0
 800177c:	d117      	bne.n	80017ae <car_process+0x102>
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <car_process+0x12c>)
 8001780:	401a      	ands	r2, r3
 8001782:	2a00      	cmp	r2, #0
 8001784:	bf14      	ite	ne
 8001786:	2201      	movne	r2, #1
 8001788:	2200      	moveq	r2, #0
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	2a00      	cmp	r2, #0
 800178e:	d10b      	bne.n	80017a8 <car_process+0xfc>
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <car_process+0x130>)
 8001792:	401a      	ands	r2, r3
 8001794:	2a00      	cmp	r2, #0
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <car_process+0x10a>
	case 'w' :
	case 'a' :
	case 's' :
	case 'd' : 	speed = gear1 ; break;
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	81bb      	strh	r3, [r7, #12]
 80017a6:	e008      	b.n	80017ba <car_process+0x10e>
	case 'w'+1 :
	case 'a'+1 :
	case 's'+1 :
	case 'd'+1 : 	speed = gear2 ; break;
 80017a8:	23c8      	movs	r3, #200	; 0xc8
 80017aa:	81bb      	strh	r3, [r7, #12]
 80017ac:	e005      	b.n	80017ba <car_process+0x10e>
	case 'w'+2 :
	case 'a'+2 :
	case 's'+2 :
	case 'd'+2 : 	speed = gear3 ; break;
 80017ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017b2:	81bb      	strh	r3, [r7, #12]
 80017b4:	e001      	b.n	80017ba <car_process+0x10e>
	default : speed = neutral;
 80017b6:	2300      	movs	r3, #0
 80017b8:	81bb      	strh	r3, [r7, #12]
	}
	drive(speed,speed,dir);
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	89b9      	ldrh	r1, [r7, #12]
 80017be:	89bb      	ldrh	r3, [r7, #12]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fec7 	bl	8001554 <drive>
	vTaskDelayUntil(&lastWakeTime1,pdMS_TO_TICKS(10));
 80017c6:	210a      	movs	r1, #10
 80017c8:	4801      	ldr	r0, [pc, #4]	; (80017d0 <car_process+0x124>)
 80017ca:	f000 ffc7 	bl	800275c <vTaskDelayUntil>
	while(1){
 80017ce:	e776      	b.n	80016be <car_process+0x12>
 80017d0:	20000080 	.word	0x20000080
 80017d4:	01100024 	.word	0x01100024
 80017d8:	00880012 	.word	0x00880012
 80017dc:	00440009 	.word	0x00440009

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180e:	f000 f835 	bl	800187c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001812:	f001 fc6d 	bl	80030f0 <xTaskGetSchedulerState>
 8001816:	4603      	mov	r3, r0
 8001818:	2b01      	cmp	r3, #1
 800181a:	d001      	beq.n	8001820 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800181c:	f002 f9cc 	bl	8003bb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001830:	f7ff fff8 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <LoopFillZerobss+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800184c:	4c09      	ldr	r4, [pc, #36]	; (8001874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185a:	f002 fc0f 	bl	800407c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185e:	f7ff fb4d 	bl	8000efc <main>
  bx lr
 8001862:	4770      	bx	lr
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800186c:	08004130 	.word	0x08004130
  ldr r2, =_sbss
 8001870:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001874:	200019cc 	.word	0x200019cc

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>
	...

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x1c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x20>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_IncTick+0x20>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	2000000c 	.word	0x2000000c
 800189c:	20000084 	.word	0x20000084

080018a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <vApplicationGetIdleTaskMemory+0x28>)
 80018b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <vApplicationGetIdleTaskMemory+0x2c>)
 80018b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000088 	.word	0x20000088
 80018cc:	200000e4 	.word	0x200000e4

080018d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <vApplicationGetTimerTaskMemory+0x2c>)
 80018e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <vApplicationGetTimerTaskMemory+0x30>)
 80018e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200002e4 	.word	0x200002e4
 8001900:	20000340 	.word	0x20000340

08001904 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f103 0208 	add.w	r2, r3, #8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f103 0208 	add.w	r2, r3, #8
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f103 0208 	add.w	r2, r3, #8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d103      	bne.n	80019c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	e00c      	b.n	80019da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3308      	adds	r3, #8
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e002      	b.n	80019ce <vListInsert+0x2e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d2f6      	bcs.n	80019c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6892      	ldr	r2, [r2, #8]
 8001a26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6852      	ldr	r2, [r2, #4]
 8001a30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d103      	bne.n	8001a44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1e5a      	subs	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a8a:	bf00      	nop
 8001a8c:	e7fe      	b.n	8001a8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001a8e:	f002 f815 	bl	8003abc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	441a      	add	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	441a      	add	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	22ff      	movs	r2, #255	; 0xff
 8001ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	22ff      	movs	r2, #255	; 0xff
 8001ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d114      	bne.n	8001b0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01a      	beq.n	8001b22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3310      	adds	r3, #16
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 f93b 	bl	8002d6c <xTaskRemoveFromEventList>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <xQueueGenericReset+0xcc>)
 8001afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f3bf 8f4f 	dsb	sy
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	e009      	b.n	8001b22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3310      	adds	r3, #16
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fef6 	bl	8001904 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3324      	adds	r3, #36	; 0x24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fef1 	bl	8001904 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001b22:	f001 fffb 	bl	8003b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	e000ed04 	.word	0xe000ed04

08001b34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10a      	bne.n	8001b5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4c:	f383 8811 	msr	BASEPRI, r3
 8001b50:	f3bf 8f6f 	isb	sy
 8001b54:	f3bf 8f4f 	dsb	sy
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001b5a:	bf00      	nop
 8001b5c:	e7fe      	b.n	8001b5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10a      	bne.n	8001b7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b68:	f383 8811 	msr	BASEPRI, r3
 8001b6c:	f3bf 8f6f 	isb	sy
 8001b70:	f3bf 8f4f 	dsb	sy
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001b76:	bf00      	nop
 8001b78:	e7fe      	b.n	8001b78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <xQueueGenericCreateStatic+0x52>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <xQueueGenericCreateStatic+0x56>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <xQueueGenericCreateStatic+0x58>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b94:	f383 8811 	msr	BASEPRI, r3
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	623b      	str	r3, [r7, #32]
}
 8001ba2:	bf00      	nop
 8001ba4:	e7fe      	b.n	8001ba4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <xQueueGenericCreateStatic+0x7e>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <xQueueGenericCreateStatic+0x82>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <xQueueGenericCreateStatic+0x84>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc0:	f383 8811 	msr	BASEPRI, r3
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	61fb      	str	r3, [r7, #28]
}
 8001bce:	bf00      	nop
 8001bd0:	e7fe      	b.n	8001bd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001bd2:	2350      	movs	r3, #80	; 0x50
 8001bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b50      	cmp	r3, #80	; 0x50
 8001bda:	d00a      	beq.n	8001bf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	61bb      	str	r3, [r7, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	e7fe      	b.n	8001bf0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00d      	beq.n	8001c18 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c04:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f805 	bl	8001c22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3730      	adds	r7, #48	; 0x30
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e002      	b.n	8001c44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c50:	2101      	movs	r1, #1
 8001c52:	69b8      	ldr	r0, [r7, #24]
 8001c54:	f7ff ff06 	bl	8001a64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <xQueueGenericSend+0x32>
	__asm volatile
 8001c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c96:	bf00      	nop
 8001c98:	e7fe      	b.n	8001c98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <xQueueGenericSend+0x40>
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <xQueueGenericSend+0x44>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <xQueueGenericSend+0x46>
 8001cac:	2300      	movs	r3, #0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <xQueueGenericSend+0x60>
	__asm volatile
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	f3bf 8f6f 	isb	sy
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001cc4:	bf00      	nop
 8001cc6:	e7fe      	b.n	8001cc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d103      	bne.n	8001cd6 <xQueueGenericSend+0x6e>
 8001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <xQueueGenericSend+0x72>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <xQueueGenericSend+0x74>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <xQueueGenericSend+0x8e>
	__asm volatile
 8001ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce4:	f383 8811 	msr	BASEPRI, r3
 8001ce8:	f3bf 8f6f 	isb	sy
 8001cec:	f3bf 8f4f 	dsb	sy
 8001cf0:	623b      	str	r3, [r7, #32]
}
 8001cf2:	bf00      	nop
 8001cf4:	e7fe      	b.n	8001cf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cf6:	f001 f9fb 	bl	80030f0 <xTaskGetSchedulerState>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <xQueueGenericSend+0x9e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <xQueueGenericSend+0xa2>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <xQueueGenericSend+0xa4>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <xQueueGenericSend+0xbe>
	__asm volatile
 8001d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	61fb      	str	r3, [r7, #28]
}
 8001d22:	bf00      	nop
 8001d24:	e7fe      	b.n	8001d24 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d26:	f001 fec9 	bl	8003abc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d302      	bcc.n	8001d3c <xQueueGenericSend+0xd4>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d129      	bne.n	8001d90 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d42:	f000 fa07 	bl	8002154 <prvCopyDataToQueue>
 8001d46:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	3324      	adds	r3, #36	; 0x24
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 f809 	bl	8002d6c <xTaskRemoveFromEventList>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <xQueueGenericSend+0x1f8>)
 8001d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	e00a      	b.n	8001d88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <xQueueGenericSend+0x1f8>)
 8001d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001d88:	f001 fec8 	bl	8003b1c <vPortExitCritical>
				return pdPASS;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e063      	b.n	8001e58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d96:	f001 fec1 	bl	8003b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e05c      	b.n	8001e58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d106      	bne.n	8001db2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 f843 	bl	8002e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001dae:	2301      	movs	r3, #1
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001db2:	f001 feb3 	bl	8003b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001db6:	f000 fdb5 	bl	8002924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001dba:	f001 fe7f 	bl	8003abc <vPortEnterCritical>
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dca:	d103      	bne.n	8001dd4 <xQueueGenericSend+0x16c>
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d103      	bne.n	8001dea <xQueueGenericSend+0x182>
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dea:	f001 fe97 	bl	8003b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dee:	1d3a      	adds	r2, r7, #4
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 f832 	bl	8002e60 <xTaskCheckForTimeOut>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d124      	bne.n	8001e4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e04:	f000 fa9e 	bl	8002344 <prvIsQueueFull>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d018      	beq.n	8001e40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	3310      	adds	r3, #16
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 ff58 	bl	8002ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e1e:	f000 fa29 	bl	8002274 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e22:	f000 fd8d 	bl	8002940 <xTaskResumeAll>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f af7c 	bne.w	8001d26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <xQueueGenericSend+0x1f8>)
 8001e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	e772      	b.n	8001d26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e42:	f000 fa17 	bl	8002274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e46:	f000 fd7b 	bl	8002940 <xTaskResumeAll>
 8001e4a:	e76c      	b.n	8001d26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e4e:	f000 fa11 	bl	8002274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e52:	f000 fd75 	bl	8002940 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001e56:	2300      	movs	r3, #0
		}
	}
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3738      	adds	r7, #56	; 0x38
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	e000ed04 	.word	0xe000ed04

08001e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	; 0x38
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e8e:	bf00      	nop
 8001e90:	e7fe      	b.n	8001e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d103      	bne.n	8001ea0 <xQueueGenericSendFromISR+0x3c>
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <xQueueGenericSendFromISR+0x40>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <xQueueGenericSendFromISR+0x42>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eae:	f383 8811 	msr	BASEPRI, r3
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	623b      	str	r3, [r7, #32]
}
 8001ebc:	bf00      	nop
 8001ebe:	e7fe      	b.n	8001ebe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d103      	bne.n	8001ece <xQueueGenericSendFromISR+0x6a>
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <xQueueGenericSendFromISR+0x6e>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <xQueueGenericSendFromISR+0x70>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10a      	bne.n	8001eee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	61fb      	str	r3, [r7, #28]
}
 8001eea:	bf00      	nop
 8001eec:	e7fe      	b.n	8001eec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001eee:	f001 fea7 	bl	8003c40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ef2:	f3ef 8211 	mrs	r2, BASEPRI
 8001ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	61ba      	str	r2, [r7, #24]
 8001f08:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <xQueueGenericSendFromISR+0xbc>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d12c      	bne.n	8001f7a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f30:	f000 f910 	bl	8002154 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d112      	bne.n	8001f64 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	3324      	adds	r3, #36	; 0x24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 ff0e 	bl	8002d6c <xTaskRemoveFromEventList>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00e      	beq.n	8001f74 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00b      	beq.n	8001f74 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	b25a      	sxtb	r2, r3
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001f74:	2301      	movs	r3, #1
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001f78:	e001      	b.n	8001f7e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001f88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3738      	adds	r7, #56	; 0x38
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	; 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <xQueueReceive+0x30>
	__asm volatile
 8001fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb2:	f383 8811 	msr	BASEPRI, r3
 8001fb6:	f3bf 8f6f 	isb	sy
 8001fba:	f3bf 8f4f 	dsb	sy
 8001fbe:	623b      	str	r3, [r7, #32]
}
 8001fc0:	bf00      	nop
 8001fc2:	e7fe      	b.n	8001fc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <xQueueReceive+0x3e>
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <xQueueReceive+0x42>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <xQueueReceive+0x44>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <xQueueReceive+0x5e>
	__asm volatile
 8001fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe0:	f383 8811 	msr	BASEPRI, r3
 8001fe4:	f3bf 8f6f 	isb	sy
 8001fe8:	f3bf 8f4f 	dsb	sy
 8001fec:	61fb      	str	r3, [r7, #28]
}
 8001fee:	bf00      	nop
 8001ff0:	e7fe      	b.n	8001ff0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ff2:	f001 f87d 	bl	80030f0 <xTaskGetSchedulerState>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <xQueueReceive+0x6e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <xQueueReceive+0x72>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <xQueueReceive+0x74>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <xQueueReceive+0x8e>
	__asm volatile
 800200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	61bb      	str	r3, [r7, #24]
}
 800201e:	bf00      	nop
 8002020:	e7fe      	b.n	8002020 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002022:	f001 fd4b 	bl	8003abc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01f      	beq.n	8002072 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002036:	f000 f8f7 	bl	8002228 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00f      	beq.n	800206a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	3310      	adds	r3, #16
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fe8c 	bl	8002d6c <xTaskRemoveFromEventList>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <xQueueReceive+0x1bc>)
 800205c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800206a:	f001 fd57 	bl	8003b1c <vPortExitCritical>
				return pdPASS;
 800206e:	2301      	movs	r3, #1
 8002070:	e069      	b.n	8002146 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002078:	f001 fd50 	bl	8003b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800207c:	2300      	movs	r3, #0
 800207e:	e062      	b.n	8002146 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fed2 	bl	8002e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002094:	f001 fd42 	bl	8003b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002098:	f000 fc44 	bl	8002924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800209c:	f001 fd0e 	bl	8003abc <vPortEnterCritical>
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d103      	bne.n	80020b6 <xQueueReceive+0x122>
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d103      	bne.n	80020cc <xQueueReceive+0x138>
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020cc:	f001 fd26 	bl	8003b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020d0:	1d3a      	adds	r2, r7, #4
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fec1 	bl	8002e60 <xTaskCheckForTimeOut>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d123      	bne.n	800212c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020e6:	f000 f917 	bl	8002318 <prvIsQueueEmpty>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d017      	beq.n	8002120 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	3324      	adds	r3, #36	; 0x24
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fde7 	bl	8002ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80020fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002100:	f000 f8b8 	bl	8002274 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002104:	f000 fc1c 	bl	8002940 <xTaskResumeAll>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d189      	bne.n	8002022 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <xQueueReceive+0x1bc>)
 8002110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	e780      	b.n	8002022 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002122:	f000 f8a7 	bl	8002274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002126:	f000 fc0b 	bl	8002940 <xTaskResumeAll>
 800212a:	e77a      	b.n	8002022 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800212c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800212e:	f000 f8a1 	bl	8002274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002132:	f000 fc05 	bl	8002940 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002138:	f000 f8ee 	bl	8002318 <prvIsQueueEmpty>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f43f af6f 	beq.w	8002022 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002144:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002146:	4618      	mov	r0, r3
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	e000ed04 	.word	0xe000ed04

08002154 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d14d      	bne.n	8002216 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 ffd4 	bl	800312c <xTaskPriorityDisinherit>
 8002184:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	e043      	b.n	8002216 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d119      	bne.n	80021c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6898      	ldr	r0, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	461a      	mov	r2, r3
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	f001 ff90 	bl	80040c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	441a      	add	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d32b      	bcc.n	8002216 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	e026      	b.n	8002216 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68d8      	ldr	r0, [r3, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	461a      	mov	r2, r3
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	f001 ff76 	bl	80040c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	425b      	negs	r3, r3
 80021e2:	441a      	add	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d207      	bcs.n	8002204 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	425b      	negs	r3, r3
 80021fe:	441a      	add	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d105      	bne.n	8002216 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	3b01      	subs	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800221e:	697b      	ldr	r3, [r7, #20]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d018      	beq.n	800226c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	441a      	add	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d303      	bcc.n	800225c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68d9      	ldr	r1, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	461a      	mov	r2, r3
 8002266:	6838      	ldr	r0, [r7, #0]
 8002268:	f001 ff2c 	bl	80040c4 <memcpy>
	}
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800227c:	f001 fc1e 	bl	8003abc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002286:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002288:	e011      	b.n	80022ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3324      	adds	r3, #36	; 0x24
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fd68 	bl	8002d6c <xTaskRemoveFromEventList>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80022a2:	f000 fe3f 	bl	8002f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	dce9      	bgt.n	800228a <prvUnlockQueue+0x16>
 80022b6:	e000      	b.n	80022ba <prvUnlockQueue+0x46>
					break;
 80022b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	22ff      	movs	r2, #255	; 0xff
 80022be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80022c2:	f001 fc2b 	bl	8003b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80022c6:	f001 fbf9 	bl	8003abc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022d2:	e011      	b.n	80022f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d012      	beq.n	8002302 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3310      	adds	r3, #16
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fd43 	bl	8002d6c <xTaskRemoveFromEventList>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80022ec:	f000 fe1a 	bl	8002f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80022f0:	7bbb      	ldrb	r3, [r7, #14]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	dce9      	bgt.n	80022d4 <prvUnlockQueue+0x60>
 8002300:	e000      	b.n	8002304 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002302:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800230c:	f001 fc06 	bl	8003b1c <vPortExitCritical>
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002320:	f001 fbcc 	bl	8003abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800232c:	2301      	movs	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e001      	b.n	8002336 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002336:	f001 fbf1 	bl	8003b1c <vPortExitCritical>

	return xReturn;
 800233a:	68fb      	ldr	r3, [r7, #12]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800234c:	f001 fbb6 	bl	8003abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	429a      	cmp	r2, r3
 800235a:	d102      	bne.n	8002362 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800235c:	2301      	movs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e001      	b.n	8002366 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002366:	f001 fbd9 	bl	8003b1c <vPortExitCritical>

	return xReturn;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e014      	b.n	80023ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <vQueueAddToRegistry+0x4c>)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002390:	490b      	ldr	r1, [pc, #44]	; (80023c0 <vQueueAddToRegistry+0x4c>)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <vQueueAddToRegistry+0x4c>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80023a6:	e006      	b.n	80023b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	d9e7      	bls.n	8002384 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	20000740 	.word	0x20000740

080023c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80023d4:	f001 fb72 	bl	8003abc <vPortEnterCritical>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d103      	bne.n	80023ee <vQueueWaitForMessageRestricted+0x2a>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d103      	bne.n	8002404 <vQueueWaitForMessageRestricted+0x40>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002404:	f001 fb8a 	bl	8003b1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3324      	adds	r3, #36	; 0x24
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fc7b 	bl	8002d14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff28 	bl	8002274 <prvUnlockQueue>
	}
 8002424:	bf00      	nop
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af04      	add	r7, sp, #16
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	623b      	str	r3, [r7, #32]
}
 8002452:	bf00      	nop
 8002454:	e7fe      	b.n	8002454 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <xTaskCreateStatic+0x46>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	61fb      	str	r3, [r7, #28]
}
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002472:	235c      	movs	r3, #92	; 0x5c
 8002474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b5c      	cmp	r3, #92	; 0x5c
 800247a:	d00a      	beq.n	8002492 <xTaskCreateStatic+0x66>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	61bb      	str	r3, [r7, #24]
}
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01e      	beq.n	80024d6 <xTaskCreateStatic+0xaa>
 8002498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01b      	beq.n	80024d6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024b0:	2300      	movs	r3, #0
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f850 	bl	800256e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024d0:	f000 f8d4 	bl	800267c <prvAddNewTaskToReadyList>
 80024d4:	e001      	b.n	80024da <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024da:	697b      	ldr	r3, [r7, #20]
	}
 80024dc:	4618      	mov	r0, r3
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af04      	add	r7, sp, #16
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f001 fbdf 	bl	8003cbc <pvPortMalloc>
 80024fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00e      	beq.n	8002524 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002506:	205c      	movs	r0, #92	; 0x5c
 8002508:	f001 fbd8 	bl	8003cbc <pvPortMalloc>
 800250c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
 800251a:	e005      	b.n	8002528 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f001 fc91 	bl	8003e44 <vPortFree>
 8002522:	e001      	b.n	8002528 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d017      	beq.n	800255e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	2300      	movs	r3, #0
 800253a:	9303      	str	r3, [sp, #12]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f80e 	bl	800256e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002552:	69f8      	ldr	r0, [r7, #28]
 8002554:	f000 f892 	bl	800267c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002558:	2301      	movs	r3, #1
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e002      	b.n	8002564 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002564:	69bb      	ldr	r3, [r7, #24]
	}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b088      	sub	sp, #32
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	461a      	mov	r2, r3
 8002586:	21a5      	movs	r1, #165	; 0xa5
 8002588:	f001 fd70 	bl	800406c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002596:	3b01      	subs	r3, #1
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f023 0307 	bic.w	r3, r3, #7
 80025a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	617b      	str	r3, [r7, #20]
}
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e012      	b.n	80025f2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	7819      	ldrb	r1, [r3, #0]
 80025d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	3334      	adds	r3, #52	; 0x34
 80025dc:	460a      	mov	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	3301      	adds	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b0f      	cmp	r3, #15
 80025f6:	d9e9      	bls.n	80025cc <prvInitialiseNewTask+0x5e>
 80025f8:	e000      	b.n	80025fc <prvInitialiseNewTask+0x8e>
		{
			break;
 80025fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	2b37      	cmp	r3, #55	; 0x37
 8002608:	d901      	bls.n	800260e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800260a:	2337      	movs	r3, #55	; 0x37
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002618:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	2200      	movs	r2, #0
 800261e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	3304      	adds	r3, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f98c 	bl	8001942 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	3318      	adds	r3, #24
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f987 	bl	8001942 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002638:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	2200      	movs	r2, #0
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	69b8      	ldr	r0, [r7, #24]
 800265e:	f001 f939 	bl	80038d4 <pxPortInitialiseStack>
 8002662:	4602      	mov	r2, r0
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002672:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002684:	f001 fa1a 	bl	8003abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <prvAddNewTaskToReadyList+0xc4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	4a2c      	ldr	r2, [pc, #176]	; (8002740 <prvAddNewTaskToReadyList+0xc4>)
 8002690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002692:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <prvAddNewTaskToReadyList+0xc8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800269a:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <prvAddNewTaskToReadyList+0xc8>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <prvAddNewTaskToReadyList+0xc4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d110      	bne.n	80026ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026a8:	f000 fc60 	bl	8002f6c <prvInitialiseTaskLists>
 80026ac:	e00d      	b.n	80026ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <prvAddNewTaskToReadyList+0xcc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <prvAddNewTaskToReadyList+0xc8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d802      	bhi.n	80026ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <prvAddNewTaskToReadyList+0xc8>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <prvAddNewTaskToReadyList+0xd0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	4a1e      	ldr	r2, [pc, #120]	; (800274c <prvAddNewTaskToReadyList+0xd0>)
 80026d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <prvAddNewTaskToReadyList+0xd0>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <prvAddNewTaskToReadyList+0xd4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d903      	bls.n	80026f0 <prvAddNewTaskToReadyList+0x74>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <prvAddNewTaskToReadyList+0xd4>)
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <prvAddNewTaskToReadyList+0xd8>)
 80026fe:	441a      	add	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f7ff f927 	bl	800195a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800270c:	f001 fa06 	bl	8003b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <prvAddNewTaskToReadyList+0xcc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00e      	beq.n	8002736 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <prvAddNewTaskToReadyList+0xc8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	429a      	cmp	r2, r3
 8002724:	d207      	bcs.n	8002736 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <prvAddNewTaskToReadyList+0xdc>)
 8002728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000c54 	.word	0x20000c54
 8002744:	20000780 	.word	0x20000780
 8002748:	20000c60 	.word	0x20000c60
 800274c:	20000c70 	.word	0x20000c70
 8002750:	20000c5c 	.word	0x20000c5c
 8002754:	20000784 	.word	0x20000784
 8002758:	e000ed04 	.word	0xe000ed04

0800275c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <vTaskDelayUntil+0x2a>
	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	617b      	str	r3, [r7, #20]
}
 8002782:	bf00      	nop
 8002784:	e7fe      	b.n	8002784 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <vTaskDelayUntil+0x46>
	__asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	613b      	str	r3, [r7, #16]
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <vTaskDelayUntil+0xf0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <vTaskDelayUntil+0x64>
	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	60fb      	str	r3, [r7, #12]
}
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80027c0:	f000 f8b0 	bl	8002924 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <vTaskDelayUntil+0xf4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20b      	bcs.n	80027f6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d211      	bcs.n	800280c <vTaskDelayUntil+0xb0>
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d90d      	bls.n	800280c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
 80027f4:	e00a      	b.n	800280c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d303      	bcc.n	8002808 <vTaskDelayUntil+0xac>
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	429a      	cmp	r2, r3
 8002806:	d901      	bls.n	800280c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002808:	2301      	movs	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fcf1 	bl	8003208 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002826:	f000 f88b 	bl	8002940 <xTaskResumeAll>
 800282a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <vTaskDelayUntil+0xf8>)
 8002834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000c7c 	.word	0x20000c7c
 8002850:	20000c58 	.word	0x20000c58
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002866:	463a      	mov	r2, r7
 8002868:	1d39      	adds	r1, r7, #4
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f816 	bl	80018a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	9202      	str	r2, [sp, #8]
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	2300      	movs	r3, #0
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	460a      	mov	r2, r1
 8002886:	4921      	ldr	r1, [pc, #132]	; (800290c <vTaskStartScheduler+0xb4>)
 8002888:	4821      	ldr	r0, [pc, #132]	; (8002910 <vTaskStartScheduler+0xb8>)
 800288a:	f7ff fdcf 	bl	800242c <xTaskCreateStatic>
 800288e:	4603      	mov	r3, r0
 8002890:	4a20      	ldr	r2, [pc, #128]	; (8002914 <vTaskStartScheduler+0xbc>)
 8002892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <vTaskStartScheduler+0xbc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e001      	b.n	80028a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80028ac:	f000 fd00 	bl	80032b0 <xTimerCreateTimerTask>
 80028b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d116      	bne.n	80028e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	613b      	str	r3, [r7, #16]
}
 80028ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <vTaskStartScheduler+0xc0>)
 80028ce:	f04f 32ff 	mov.w	r2, #4294967295
 80028d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <vTaskStartScheduler+0xc4>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <vTaskStartScheduler+0xc8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028e0:	f001 f87a 	bl	80039d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80028e4:	e00e      	b.n	8002904 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d10a      	bne.n	8002904 <vTaskStartScheduler+0xac>
	__asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	60fb      	str	r3, [r7, #12]
}
 8002900:	bf00      	nop
 8002902:	e7fe      	b.n	8002902 <vTaskStartScheduler+0xaa>
}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	08004110 	.word	0x08004110
 8002910:	08002f3d 	.word	0x08002f3d
 8002914:	20000c78 	.word	0x20000c78
 8002918:	20000c74 	.word	0x20000c74
 800291c:	20000c60 	.word	0x20000c60
 8002920:	20000c58 	.word	0x20000c58

08002924 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <vTaskSuspendAll+0x18>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a03      	ldr	r2, [pc, #12]	; (800293c <vTaskSuspendAll+0x18>)
 8002930:	6013      	str	r3, [r2, #0]
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000c7c 	.word	0x20000c7c

08002940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800294e:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <xTaskResumeAll+0x118>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <xTaskResumeAll+0x2c>
	__asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	603b      	str	r3, [r7, #0]
}
 8002968:	bf00      	nop
 800296a:	e7fe      	b.n	800296a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800296c:	f001 f8a6 	bl	8003abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002970:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <xTaskResumeAll+0x118>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <xTaskResumeAll+0x118>)
 8002978:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800297a:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <xTaskResumeAll+0x118>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d162      	bne.n	8002a48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <xTaskResumeAll+0x11c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d05e      	beq.n	8002a48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800298a:	e02f      	b.n	80029ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <xTaskResumeAll+0x120>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3318      	adds	r3, #24
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f839 	bl	8001a10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3304      	adds	r3, #4
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f834 	bl	8001a10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <xTaskResumeAll+0x124>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d903      	bls.n	80029bc <xTaskResumeAll+0x7c>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <xTaskResumeAll+0x124>)
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <xTaskResumeAll+0x128>)
 80029ca:	441a      	add	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f7fe ffc1 	bl	800195a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <xTaskResumeAll+0x12c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <xTaskResumeAll+0x130>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ec:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <xTaskResumeAll+0x120>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1cb      	bne.n	800298c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029fa:	f000 fb55 	bl	80030a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <xTaskResumeAll+0x134>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d010      	beq.n	8002a2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a0a:	f000 f845 	bl	8002a98 <xTaskIncrementTick>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <xTaskResumeAll+0x130>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f1      	bne.n	8002a0a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <xTaskResumeAll+0x134>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <xTaskResumeAll+0x130>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <xTaskResumeAll+0x138>)
 8002a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a48:	f001 f868 	bl	8003b1c <vPortExitCritical>

	return xAlreadyYielded;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000c7c 	.word	0x20000c7c
 8002a5c:	20000c54 	.word	0x20000c54
 8002a60:	20000c14 	.word	0x20000c14
 8002a64:	20000c5c 	.word	0x20000c5c
 8002a68:	20000784 	.word	0x20000784
 8002a6c:	20000780 	.word	0x20000780
 8002a70:	20000c68 	.word	0x20000c68
 8002a74:	20000c64 	.word	0x20000c64
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <xTaskGetTickCount+0x18>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000c58 	.word	0x20000c58

08002a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <xTaskIncrementTick+0x150>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 808e 	bne.w	8002bc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002aac:	4b4f      	ldr	r3, [pc, #316]	; (8002bec <xTaskIncrementTick+0x154>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ab4:	4a4d      	ldr	r2, [pc, #308]	; (8002bec <xTaskIncrementTick+0x154>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d120      	bne.n	8002b02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <xTaskIncrementTick+0x158>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	603b      	str	r3, [r7, #0]
}
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <xTaskIncrementTick+0x46>
 8002ae0:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <xTaskIncrementTick+0x158>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <xTaskIncrementTick+0x15c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a41      	ldr	r2, [pc, #260]	; (8002bf0 <xTaskIncrementTick+0x158>)
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4a41      	ldr	r2, [pc, #260]	; (8002bf4 <xTaskIncrementTick+0x15c>)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <xTaskIncrementTick+0x160>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a3f      	ldr	r2, [pc, #252]	; (8002bf8 <xTaskIncrementTick+0x160>)
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	f000 fad3 	bl	80030a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b02:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <xTaskIncrementTick+0x164>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d34e      	bcc.n	8002baa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <xTaskIncrementTick+0x158>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <xTaskIncrementTick+0x82>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <xTaskIncrementTick+0x84>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <xTaskIncrementTick+0x164>)
 8002b22:	f04f 32ff 	mov.w	r2, #4294967295
 8002b26:	601a      	str	r2, [r3, #0]
					break;
 8002b28:	e03f      	b.n	8002baa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <xTaskIncrementTick+0x158>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d203      	bcs.n	8002b4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <xTaskIncrementTick+0x164>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6013      	str	r3, [r2, #0]
						break;
 8002b48:	e02f      	b.n	8002baa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe ff5e 	bl	8001a10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3318      	adds	r3, #24
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe ff55 	bl	8001a10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <xTaskIncrementTick+0x168>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d903      	bls.n	8002b7a <xTaskIncrementTick+0xe2>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <xTaskIncrementTick+0x168>)
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <xTaskIncrementTick+0x16c>)
 8002b88:	441a      	add	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f7fe fee2 	bl	800195a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <xTaskIncrementTick+0x170>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3b3      	bcc.n	8002b0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ba8:	e7b0      	b.n	8002b0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <xTaskIncrementTick+0x170>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	4914      	ldr	r1, [pc, #80]	; (8002c04 <xTaskIncrementTick+0x16c>)
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d907      	bls.n	8002bd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e004      	b.n	8002bd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <xTaskIncrementTick+0x174>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <xTaskIncrementTick+0x174>)
 8002bd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <xTaskIncrementTick+0x178>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002bde:	697b      	ldr	r3, [r7, #20]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000c7c 	.word	0x20000c7c
 8002bec:	20000c58 	.word	0x20000c58
 8002bf0:	20000c0c 	.word	0x20000c0c
 8002bf4:	20000c10 	.word	0x20000c10
 8002bf8:	20000c6c 	.word	0x20000c6c
 8002bfc:	20000c74 	.word	0x20000c74
 8002c00:	20000c5c 	.word	0x20000c5c
 8002c04:	20000784 	.word	0x20000784
 8002c08:	20000780 	.word	0x20000780
 8002c0c:	20000c64 	.word	0x20000c64
 8002c10:	20000c68 	.word	0x20000c68

08002c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <vTaskSwitchContext+0xa4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <vTaskSwitchContext+0xa8>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c28:	e041      	b.n	8002cae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <vTaskSwitchContext+0xa8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c30:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <vTaskSwitchContext+0xac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e010      	b.n	8002c5a <vTaskSwitchContext+0x46>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <vTaskSwitchContext+0x40>
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	607b      	str	r3, [r7, #4]
}
 8002c50:	bf00      	nop
 8002c52:	e7fe      	b.n	8002c52 <vTaskSwitchContext+0x3e>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	491a      	ldr	r1, [pc, #104]	; (8002cc4 <vTaskSwitchContext+0xb0>)
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0e4      	beq.n	8002c38 <vTaskSwitchContext+0x24>
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <vTaskSwitchContext+0xb0>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d104      	bne.n	8002c9e <vTaskSwitchContext+0x8a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <vTaskSwitchContext+0xb4>)
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <vTaskSwitchContext+0xac>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6013      	str	r3, [r2, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	20000c7c 	.word	0x20000c7c
 8002cbc:	20000c68 	.word	0x20000c68
 8002cc0:	20000c5c 	.word	0x20000c5c
 8002cc4:	20000784 	.word	0x20000784
 8002cc8:	20000780 	.word	0x20000780

08002ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	60fb      	str	r3, [r7, #12]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <vTaskPlaceOnEventList+0x44>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe fe50 	bl	80019a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d00:	2101      	movs	r1, #1
 8002d02:	6838      	ldr	r0, [r7, #0]
 8002d04:	f000 fa80 	bl	8003208 <prvAddCurrentTaskToDelayedList>
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000780 	.word	0x20000780

08002d14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	617b      	str	r3, [r7, #20]
}
 8002d38:	bf00      	nop
 8002d3a:	e7fe      	b.n	8002d3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <vTaskPlaceOnEventListRestricted+0x54>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3318      	adds	r3, #24
 8002d42:	4619      	mov	r1, r3
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7fe fe08 	bl	800195a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68b8      	ldr	r0, [r7, #8]
 8002d5a:	f000 fa55 	bl	8003208 <prvAddCurrentTaskToDelayedList>
	}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000780 	.word	0x20000780

08002d6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	60fb      	str	r3, [r7, #12]
}
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fe37 	bl	8001a10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <xTaskRemoveFromEventList+0xb0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11d      	bne.n	8002de6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fe2e 	bl	8001a10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <xTaskRemoveFromEventList+0xb4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d903      	bls.n	8002dc8 <xTaskRemoveFromEventList+0x5c>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <xTaskRemoveFromEventList+0xb4>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <xTaskRemoveFromEventList+0xb8>)
 8002dd6:	441a      	add	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7fe fdbb 	bl	800195a <vListInsertEnd>
 8002de4:	e005      	b.n	8002df2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	3318      	adds	r3, #24
 8002dea:	4619      	mov	r1, r3
 8002dec:	480e      	ldr	r0, [pc, #56]	; (8002e28 <xTaskRemoveFromEventList+0xbc>)
 8002dee:	f7fe fdb4 	bl	800195a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <xTaskRemoveFromEventList+0xc0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d905      	bls.n	8002e0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <xTaskRemoveFromEventList+0xc4>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e001      	b.n	8002e10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002e10:	697b      	ldr	r3, [r7, #20]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000c7c 	.word	0x20000c7c
 8002e20:	20000c5c 	.word	0x20000c5c
 8002e24:	20000784 	.word	0x20000784
 8002e28:	20000c14 	.word	0x20000c14
 8002e2c:	20000780 	.word	0x20000780
 8002e30:	20000c68 	.word	0x20000c68

08002e34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <vTaskInternalSetTimeOutState+0x24>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <vTaskInternalSetTimeOutState+0x28>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	605a      	str	r2, [r3, #4]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000c6c 	.word	0x20000c6c
 8002e5c:	20000c58 	.word	0x20000c58

08002e60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	613b      	str	r3, [r7, #16]
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	60fb      	str	r3, [r7, #12]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002ea2:	f000 fe0b 	bl	8003abc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <xTaskCheckForTimeOut+0xbc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d102      	bne.n	8002ec6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e023      	b.n	8002f0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <xTaskCheckForTimeOut+0xc0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d007      	beq.n	8002ee2 <xTaskCheckForTimeOut+0x82>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d302      	bcc.n	8002ee2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002edc:	2301      	movs	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	e015      	b.n	8002f0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d20b      	bcs.n	8002f04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff9b 	bl	8002e34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e004      	b.n	8002f0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f0e:	f000 fe05 	bl	8003b1c <vPortExitCritical>

	return xReturn;
 8002f12:	69fb      	ldr	r3, [r7, #28]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000c58 	.word	0x20000c58
 8002f20:	20000c6c 	.word	0x20000c6c

08002f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <vTaskMissedYield+0x14>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000c68 	.word	0x20000c68

08002f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f44:	f000 f852 	bl	8002fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <prvIdleTask+0x28>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d9f9      	bls.n	8002f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <prvIdleTask+0x2c>)
 8002f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f60:	e7f0      	b.n	8002f44 <prvIdleTask+0x8>
 8002f62:	bf00      	nop
 8002f64:	20000784 	.word	0x20000784
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	e00c      	b.n	8002f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <prvInitialiseTaskLists+0x60>)
 8002f84:	4413      	add	r3, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fcbc 	bl	8001904 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b37      	cmp	r3, #55	; 0x37
 8002f96:	d9ef      	bls.n	8002f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <prvInitialiseTaskLists+0x64>)
 8002f9a:	f7fe fcb3 	bl	8001904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f9e:	480d      	ldr	r0, [pc, #52]	; (8002fd4 <prvInitialiseTaskLists+0x68>)
 8002fa0:	f7fe fcb0 	bl	8001904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <prvInitialiseTaskLists+0x6c>)
 8002fa6:	f7fe fcad 	bl	8001904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002faa:	480c      	ldr	r0, [pc, #48]	; (8002fdc <prvInitialiseTaskLists+0x70>)
 8002fac:	f7fe fcaa 	bl	8001904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fb0:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <prvInitialiseTaskLists+0x74>)
 8002fb2:	f7fe fca7 	bl	8001904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <prvInitialiseTaskLists+0x78>)
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <prvInitialiseTaskLists+0x64>)
 8002fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <prvInitialiseTaskLists+0x7c>)
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <prvInitialiseTaskLists+0x68>)
 8002fc0:	601a      	str	r2, [r3, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000784 	.word	0x20000784
 8002fd0:	20000be4 	.word	0x20000be4
 8002fd4:	20000bf8 	.word	0x20000bf8
 8002fd8:	20000c14 	.word	0x20000c14
 8002fdc:	20000c28 	.word	0x20000c28
 8002fe0:	20000c40 	.word	0x20000c40
 8002fe4:	20000c0c 	.word	0x20000c0c
 8002fe8:	20000c10 	.word	0x20000c10

08002fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ff2:	e019      	b.n	8003028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ff4:	f000 fd62 	bl	8003abc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <prvCheckTasksWaitingTermination+0x50>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe fd03 	bl	8001a10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <prvCheckTasksWaitingTermination+0x54>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <prvCheckTasksWaitingTermination+0x54>)
 8003012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <prvCheckTasksWaitingTermination+0x58>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3b01      	subs	r3, #1
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <prvCheckTasksWaitingTermination+0x58>)
 800301c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800301e:	f000 fd7d 	bl	8003b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f810 	bl	8003048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <prvCheckTasksWaitingTermination+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e1      	bne.n	8002ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000c28 	.word	0x20000c28
 8003040:	20000c54 	.word	0x20000c54
 8003044:	20000c3c 	.word	0x20000c3c

08003048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fef0 	bl	8003e44 <vPortFree>
				vPortFree( pxTCB );
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 feed 	bl	8003e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800306a:	e018      	b.n	800309e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003072:	2b01      	cmp	r3, #1
 8003074:	d103      	bne.n	800307e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fee4 	bl	8003e44 <vPortFree>
	}
 800307c:	e00f      	b.n	800309e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003084:	2b02      	cmp	r3, #2
 8003086:	d00a      	beq.n	800309e <prvDeleteTCB+0x56>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	60fb      	str	r3, [r7, #12]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <prvDeleteTCB+0x54>
	}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <prvResetNextTaskUnblockTime+0x40>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <prvResetNextTaskUnblockTime+0x14>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <prvResetNextTaskUnblockTime+0x16>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <prvResetNextTaskUnblockTime+0x44>)
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030ca:	e008      	b.n	80030de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <prvResetNextTaskUnblockTime+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <prvResetNextTaskUnblockTime+0x44>)
 80030dc:	6013      	str	r3, [r2, #0]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	20000c0c 	.word	0x20000c0c
 80030ec:	20000c74 	.word	0x20000c74

080030f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <xTaskGetSchedulerState+0x34>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030fe:	2301      	movs	r3, #1
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	e008      	b.n	8003116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <xTaskGetSchedulerState+0x38>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800310c:	2302      	movs	r3, #2
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	e001      	b.n	8003116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003116:	687b      	ldr	r3, [r7, #4]
	}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000c60 	.word	0x20000c60
 8003128:	20000c7c 	.word	0x20000c7c

0800312c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d056      	beq.n	80031f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003142:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <xTaskPriorityDisinherit+0xd0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d00a      	beq.n	8003162 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	60fb      	str	r3, [r7, #12]
}
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	60bb      	str	r3, [r7, #8]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	429a      	cmp	r2, r3
 8003194:	d02c      	beq.n	80031f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	2b00      	cmp	r3, #0
 800319c:	d128      	bne.n	80031f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fc34 	bl	8001a10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <xTaskPriorityDisinherit+0xd4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d903      	bls.n	80031d0 <xTaskPriorityDisinherit+0xa4>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <xTaskPriorityDisinherit+0xd4>)
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4a09      	ldr	r2, [pc, #36]	; (8003204 <xTaskPriorityDisinherit+0xd8>)
 80031de:	441a      	add	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7fe fbb7 	bl	800195a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031f0:	697b      	ldr	r3, [r7, #20]
	}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000780 	.word	0x20000780
 8003200:	20000c5c 	.word	0x20000c5c
 8003204:	20000784 	.word	0x20000784

08003208 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003212:	4b21      	ldr	r3, [pc, #132]	; (8003298 <prvAddCurrentTaskToDelayedList+0x90>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <prvAddCurrentTaskToDelayedList+0x94>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3304      	adds	r3, #4
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fbf6 	bl	8001a10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d10a      	bne.n	8003242 <prvAddCurrentTaskToDelayedList+0x3a>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <prvAddCurrentTaskToDelayedList+0x94>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4819      	ldr	r0, [pc, #100]	; (80032a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800323c:	f7fe fb8d 	bl	800195a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003240:	e026      	b.n	8003290 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800324a:	4b14      	ldr	r3, [pc, #80]	; (800329c <prvAddCurrentTaskToDelayedList+0x94>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	429a      	cmp	r2, r3
 8003258:	d209      	bcs.n	800326e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <prvAddCurrentTaskToDelayedList+0x94>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7fe fb9a 	bl	80019a0 <vListInsert>
}
 800326c:	e010      	b.n	8003290 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <prvAddCurrentTaskToDelayedList+0x94>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3304      	adds	r3, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f7fe fb90 	bl	80019a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	d202      	bcs.n	8003290 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000c58 	.word	0x20000c58
 800329c:	20000780 	.word	0x20000780
 80032a0:	20000c40 	.word	0x20000c40
 80032a4:	20000c10 	.word	0x20000c10
 80032a8:	20000c0c 	.word	0x20000c0c
 80032ac:	20000c74 	.word	0x20000c74

080032b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80032ba:	f000 facb 	bl	8003854 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <xTimerCreateTimerTask+0x80>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d021      	beq.n	800330a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80032ce:	1d3a      	adds	r2, r7, #4
 80032d0:	f107 0108 	add.w	r1, r7, #8
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe faf9 	bl	80018d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	9202      	str	r2, [sp, #8]
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2302      	movs	r3, #2
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	460a      	mov	r2, r1
 80032f0:	4910      	ldr	r1, [pc, #64]	; (8003334 <xTimerCreateTimerTask+0x84>)
 80032f2:	4811      	ldr	r0, [pc, #68]	; (8003338 <xTimerCreateTimerTask+0x88>)
 80032f4:	f7ff f89a 	bl	800242c <xTaskCreateStatic>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4a10      	ldr	r2, [pc, #64]	; (800333c <xTimerCreateTimerTask+0x8c>)
 80032fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <xTimerCreateTimerTask+0x8c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003306:	2301      	movs	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	613b      	str	r3, [r7, #16]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003326:	697b      	ldr	r3, [r7, #20]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000cb0 	.word	0x20000cb0
 8003334:	08004118 	.word	0x08004118
 8003338:	0800345d 	.word	0x0800345d
 800333c:	20000cb4 	.word	0x20000cb4

08003340 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	623b      	str	r3, [r7, #32]
}
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <xTimerGenericCommand+0x98>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02a      	beq.n	80033cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b05      	cmp	r3, #5
 8003386:	dc18      	bgt.n	80033ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003388:	f7ff feb2 	bl	80030f0 <xTaskGetSchedulerState>
 800338c:	4603      	mov	r3, r0
 800338e:	2b02      	cmp	r3, #2
 8003390:	d109      	bne.n	80033a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <xTimerGenericCommand+0x98>)
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f107 0110 	add.w	r1, r7, #16
 800339a:	2300      	movs	r3, #0
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	f7fe fc63 	bl	8001c68 <xQueueGenericSend>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24
 80033a4:	e012      	b.n	80033cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <xTimerGenericCommand+0x98>)
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	f107 0110 	add.w	r1, r7, #16
 80033ae:	2300      	movs	r3, #0
 80033b0:	2200      	movs	r2, #0
 80033b2:	f7fe fc59 	bl	8001c68 <xQueueGenericSend>
 80033b6:	6278      	str	r0, [r7, #36]	; 0x24
 80033b8:	e008      	b.n	80033cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <xTimerGenericCommand+0x98>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f107 0110 	add.w	r1, r7, #16
 80033c2:	2300      	movs	r3, #0
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	f7fe fd4d 	bl	8001e64 <xQueueGenericSendFromISR>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000cb0 	.word	0x20000cb0

080033dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <prvProcessExpiredTimer+0x7c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fb0b 	bl	8001a10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d122      	bne.n	8003448 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	18d1      	adds	r1, r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	6978      	ldr	r0, [r7, #20]
 8003410:	f000 f8c8 	bl	80035a4 <prvInsertTimerInActiveList>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800341a:	2300      	movs	r3, #0
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	2100      	movs	r1, #0
 8003424:	6978      	ldr	r0, [r7, #20]
 8003426:	f7ff ff8b 	bl	8003340 <xTimerGenericCommand>
 800342a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	60fb      	str	r3, [r7, #12]
}
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	4798      	blx	r3
}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000ca8 	.word	0x20000ca8

0800345c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f857 	bl	800351c <prvGetNextExpireTime>
 800346e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4619      	mov	r1, r3
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f803 	bl	8003480 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800347a:	f000 f8d5 	bl	8003628 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800347e:	e7f1      	b.n	8003464 <prvTimerTask+0x8>

08003480 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800348a:	f7ff fa4b 	bl	8002924 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f866 	bl	8003564 <prvSampleTimeNow>
 8003498:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d130      	bne.n	8003502 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <prvProcessTimerOrBlockTask+0x3c>
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d806      	bhi.n	80034bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80034ae:	f7ff fa47 	bl	8002940 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff91 	bl	80033dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80034ba:	e024      	b.n	8003506 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <prvProcessTimerOrBlockTask+0x90>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <prvProcessTimerOrBlockTask+0x94>)
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	f7fe ff6f 	bl	80023c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80034e6:	f7ff fa2b 	bl	8002940 <xTaskResumeAll>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <prvProcessTimerOrBlockTask+0x98>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
}
 8003500:	e001      	b.n	8003506 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003502:	f7ff fa1d 	bl	8002940 <xTaskResumeAll>
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000cac 	.word	0x20000cac
 8003514:	20000cb0 	.word	0x20000cb0
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <prvGetNextExpireTime+0x44>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <prvGetNextExpireTime+0x44>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e001      	b.n	8003552 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000ca8 	.word	0x20000ca8

08003564 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800356c:	f7ff fa86 	bl	8002a7c <xTaskGetTickCount>
 8003570:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <prvSampleTimeNow+0x3c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	429a      	cmp	r2, r3
 800357a:	d205      	bcs.n	8003588 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800357c:	f000 f908 	bl	8003790 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e002      	b.n	800358e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800358e:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <prvSampleTimeNow+0x3c>)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003594:	68fb      	ldr	r3, [r7, #12]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000cb8 	.word	0x20000cb8

080035a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d812      	bhi.n	80035f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad2      	subs	r2, r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e01b      	b.n	8003616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <prvInsertTimerInActiveList+0x7c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3304      	adds	r3, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f7fe f9d9 	bl	80019a0 <vListInsert>
 80035ee:	e012      	b.n	8003616 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d206      	bcs.n	8003606 <prvInsertTimerInActiveList+0x62>
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e007      	b.n	8003616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <prvInsertTimerInActiveList+0x80>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7fe f9c5 	bl	80019a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003616:	697b      	ldr	r3, [r7, #20]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000cac 	.word	0x20000cac
 8003624:	20000ca8 	.word	0x20000ca8

08003628 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	; 0x38
 800362c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800362e:	e09d      	b.n	800376c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	da18      	bge.n	8003668 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	3304      	adds	r3, #4
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	61fb      	str	r3, [r7, #28]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800365e:	6850      	ldr	r0, [r2, #4]
 8003660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003662:	6892      	ldr	r2, [r2, #8]
 8003664:	4611      	mov	r1, r2
 8003666:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db7e      	blt.n	800376c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe f9c6 	bl	8001a10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003684:	463b      	mov	r3, r7
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff6c 	bl	8003564 <prvSampleTimeNow>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b09      	cmp	r3, #9
 8003692:	d86a      	bhi.n	800376a <prvProcessReceivedCommands+0x142>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <prvProcessReceivedCommands+0x74>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036c5 	.word	0x080036c5
 80036a8:	0800376d 	.word	0x0800376d
 80036ac:	08003721 	.word	0x08003721
 80036b0:	08003759 	.word	0x08003759
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036c5 	.word	0x080036c5
 80036bc:	0800376d 	.word	0x0800376d
 80036c0:	08003721 	.word	0x08003721
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	18d1      	adds	r1, r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036d2:	f7ff ff67 	bl	80035a4 <prvInsertTimerInActiveList>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d047      	beq.n	800376c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d13f      	bne.n	800376c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	441a      	add	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	2100      	movs	r1, #0
 80036fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fe:	f7ff fe1f 	bl	8003340 <xTimerGenericCommand>
 8003702:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d130      	bne.n	800376c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	61bb      	str	r3, [r7, #24]
}
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	617b      	str	r3, [r7, #20]
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	18d1      	adds	r1, r2, r3
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003752:	f7ff ff27 	bl	80035a4 <prvInsertTimerInActiveList>
					break;
 8003756:	e009      	b.n	800376c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003764:	f000 fb6e 	bl	8003e44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003768:	e000      	b.n	800376c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800376a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <prvProcessReceivedCommands+0x164>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1d39      	adds	r1, r7, #4
 8003772:	2200      	movs	r2, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe fc0d 	bl	8001f94 <xQueueReceive>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	f47f af57 	bne.w	8003630 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	3730      	adds	r7, #48	; 0x30
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000cb0 	.word	0x20000cb0

08003790 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003796:	e045      	b.n	8003824 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <prvSwitchTimerLists+0xbc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <prvSwitchTimerLists+0xbc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe f92d 	bl	8001a10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d12e      	bne.n	8003824 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d90e      	bls.n	80037f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <prvSwitchTimerLists+0xbc>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f7fe f8d6 	bl	80019a0 <vListInsert>
 80037f4:	e016      	b.n	8003824 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037f6:	2300      	movs	r3, #0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2300      	movs	r3, #0
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	2100      	movs	r1, #0
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fd9d 	bl	8003340 <xTimerGenericCommand>
 8003806:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <prvSwitchTimerLists+0x94>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	603b      	str	r3, [r7, #0]
}
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <prvSwitchTimerLists+0xbc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1b4      	bne.n	8003798 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <prvSwitchTimerLists+0xbc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <prvSwitchTimerLists+0xc0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <prvSwitchTimerLists+0xbc>)
 800383a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <prvSwitchTimerLists+0xc0>)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	6013      	str	r3, [r2, #0]
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000ca8 	.word	0x20000ca8
 8003850:	20000cac 	.word	0x20000cac

08003854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800385a:	f000 f92f 	bl	8003abc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <prvCheckForValidListAndQueue+0x60>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d120      	bne.n	80038a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003866:	4814      	ldr	r0, [pc, #80]	; (80038b8 <prvCheckForValidListAndQueue+0x64>)
 8003868:	f7fe f84c 	bl	8001904 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800386c:	4813      	ldr	r0, [pc, #76]	; (80038bc <prvCheckForValidListAndQueue+0x68>)
 800386e:	f7fe f849 	bl	8001904 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <prvCheckForValidListAndQueue+0x6c>)
 8003874:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <prvCheckForValidListAndQueue+0x64>)
 8003876:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <prvCheckForValidListAndQueue+0x70>)
 800387a:	4a10      	ldr	r2, [pc, #64]	; (80038bc <prvCheckForValidListAndQueue+0x68>)
 800387c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800387e:	2300      	movs	r3, #0
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <prvCheckForValidListAndQueue+0x74>)
 8003884:	4a11      	ldr	r2, [pc, #68]	; (80038cc <prvCheckForValidListAndQueue+0x78>)
 8003886:	2110      	movs	r1, #16
 8003888:	200a      	movs	r0, #10
 800388a:	f7fe f953 	bl	8001b34 <xQueueGenericCreateStatic>
 800388e:	4603      	mov	r3, r0
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <prvCheckForValidListAndQueue+0x60>)
 8003892:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <prvCheckForValidListAndQueue+0x60>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <prvCheckForValidListAndQueue+0x60>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	490b      	ldr	r1, [pc, #44]	; (80038d0 <prvCheckForValidListAndQueue+0x7c>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fd66 	bl	8002374 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038a8:	f000 f938 	bl	8003b1c <vPortExitCritical>
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000cb0 	.word	0x20000cb0
 80038b8:	20000c80 	.word	0x20000c80
 80038bc:	20000c94 	.word	0x20000c94
 80038c0:	20000ca8 	.word	0x20000ca8
 80038c4:	20000cac 	.word	0x20000cac
 80038c8:	20000d5c 	.word	0x20000d5c
 80038cc:	20000cbc 	.word	0x20000cbc
 80038d0:	08004120 	.word	0x08004120

080038d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3b04      	subs	r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3b04      	subs	r3, #4
 80038f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b04      	subs	r3, #4
 8003902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003904:	4a08      	ldr	r2, [pc, #32]	; (8003928 <pxPortInitialiseStack+0x54>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3b14      	subs	r3, #20
 800390e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b20      	subs	r3, #32
 800391a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	0800392d 	.word	0x0800392d

0800392c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <prvTaskExitError+0x54>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d00a      	beq.n	8003956 <prvTaskExitError+0x2a>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	60fb      	str	r3, [r7, #12]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <prvTaskExitError+0x28>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60bb      	str	r3, [r7, #8]
}
 8003968:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800396a:	bf00      	nop
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0fc      	beq.n	800396c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000010 	.word	0x20000010
	...

08003990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <pxCurrentTCBConst2>)
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	6808      	ldr	r0, [r1, #0]
 8003996:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800399a:	f380 8809 	msr	PSP, r0
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f04f 0000 	mov.w	r0, #0
 80039a6:	f380 8811 	msr	BASEPRI, r0
 80039aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80039ae:	4770      	bx	lr

080039b0 <pxCurrentTCBConst2>:
 80039b0:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop

080039b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80039b8:	4806      	ldr	r0, [pc, #24]	; (80039d4 <prvPortStartFirstTask+0x1c>)
 80039ba:	6800      	ldr	r0, [r0, #0]
 80039bc:	6800      	ldr	r0, [r0, #0]
 80039be:	f380 8808 	msr	MSP, r0
 80039c2:	b662      	cpsie	i
 80039c4:	b661      	cpsie	f
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	df00      	svc	0
 80039d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039d2:	bf00      	nop
 80039d4:	e000ed08 	.word	0xe000ed08

080039d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039de:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <xPortStartScheduler+0xd0>)
 80039e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <xPortStartScheduler+0xd4>)
 8003a04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a06:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a08:	2207      	movs	r2, #7
 8003a0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a0c:	e009      	b.n	8003a22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b80      	cmp	r3, #128	; 0x80
 8003a2c:	d0ef      	beq.n	8003a0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1c3 0307 	rsb	r3, r3, #7
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00a      	beq.n	8003a50 <xPortStartScheduler+0x78>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60bb      	str	r3, [r7, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <xPortStartScheduler+0xd8>)
 8003a64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <xPortStartScheduler+0xdc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <xPortStartScheduler+0xdc>)
 8003a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <xPortStartScheduler+0xdc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <xPortStartScheduler+0xdc>)
 8003a80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a86:	f000 f8b9 	bl	8003bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <xPortStartScheduler+0xe0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a90:	f7ff ff92 	bl	80039b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a94:	f7ff f8be 	bl	8002c14 <vTaskSwitchContext>
	prvTaskExitError();
 8003a98:	f7ff ff48 	bl	800392c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	e000e400 	.word	0xe000e400
 8003aac:	20000dac 	.word	0x20000dac
 8003ab0:	20000db0 	.word	0x20000db0
 8003ab4:	e000ed20 	.word	0xe000ed20
 8003ab8:	20000010 	.word	0x20000010

08003abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	607b      	str	r3, [r7, #4]
}
 8003ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <vPortEnterCritical+0x58>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <vPortEnterCritical+0x58>)
 8003ade:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <vPortEnterCritical+0x58>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10f      	bne.n	8003b08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <vPortEnterCritical+0x5c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <vPortEnterCritical+0x4c>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	603b      	str	r3, [r7, #0]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <vPortEnterCritical+0x4a>
	}
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000010 	.word	0x20000010
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <vPortExitCritical+0x4c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <vPortExitCritical+0x24>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	607b      	str	r3, [r7, #4]
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <vPortExitCritical+0x4c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <vPortExitCritical+0x4c>)
 8003b48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <vPortExitCritical+0x4c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <vPortExitCritical+0x42>
 8003b52:	2300      	movs	r3, #0
 8003b54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f383 8811 	msr	BASEPRI, r3
}
 8003b5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	20000010 	.word	0x20000010
 8003b6c:	00000000 	.word	0x00000000

08003b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b70:	f3ef 8009 	mrs	r0, PSP
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <pxCurrentTCBConst>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b80:	6010      	str	r0, [r2, #0]
 8003b82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b8a:	f380 8811 	msr	BASEPRI, r0
 8003b8e:	f7ff f841 	bl	8002c14 <vTaskSwitchContext>
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	6808      	ldr	r0, [r1, #0]
 8003ba2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ba6:	f380 8809 	msr	PSP, r0
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	4770      	bx	lr

08003bb0 <pxCurrentTCBConst>:
 8003bb0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop

08003bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	607b      	str	r3, [r7, #4]
}
 8003bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bd2:	f7fe ff61 	bl	8002a98 <xTaskIncrementTick>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <xPortSysTickHandler+0x40>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f383 8811 	msr	BASEPRI, r3
}
 8003bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <vPortSetupTimerInterrupt+0x30>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <vPortSetupTimerInterrupt+0x34>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <vPortSetupTimerInterrupt+0x38>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <vPortSetupTimerInterrupt+0x3c>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <vPortSetupTimerInterrupt+0x40>)
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c1e:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <vPortSetupTimerInterrupt+0x30>)
 8003c20:	2207      	movs	r2, #7
 8003c22:	601a      	str	r2, [r3, #0]
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	e000e010 	.word	0xe000e010
 8003c30:	e000e018 	.word	0xe000e018
 8003c34:	20000008 	.word	0x20000008
 8003c38:	10624dd3 	.word	0x10624dd3
 8003c3c:	e000e014 	.word	0xe000e014

08003c40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c46:	f3ef 8305 	mrs	r3, IPSR
 8003c4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d914      	bls.n	8003c7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <vPortValidateInterruptPriority+0x6c>)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <vPortValidateInterruptPriority+0x70>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	7afa      	ldrb	r2, [r7, #11]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d20a      	bcs.n	8003c7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	607b      	str	r3, [r7, #4]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <vPortValidateInterruptPriority+0x74>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <vPortValidateInterruptPriority+0x78>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d90a      	bls.n	8003ca2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	603b      	str	r3, [r7, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <vPortValidateInterruptPriority+0x60>
	}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	e000e3f0 	.word	0xe000e3f0
 8003cb0:	20000dac 	.word	0x20000dac
 8003cb4:	e000ed0c 	.word	0xe000ed0c
 8003cb8:	20000db0 	.word	0x20000db0

08003cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003cc8:	f7fe fe2c 	bl	8002924 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ccc:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <pvPortMalloc+0x174>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003cd4:	f000 f910 	bl	8003ef8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cd8:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <pvPortMalloc+0x178>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 808e 	bne.w	8003e02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01d      	beq.n	8003d28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003cec:	2208      	movs	r2, #8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d014      	beq.n	8003d28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	3308      	adds	r3, #8
 8003d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <pvPortMalloc+0x6c>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	617b      	str	r3, [r7, #20]
}
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d069      	beq.n	8003e02 <pvPortMalloc+0x146>
 8003d2e:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <pvPortMalloc+0x17c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d864      	bhi.n	8003e02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d38:	4b40      	ldr	r3, [pc, #256]	; (8003e3c <pvPortMalloc+0x180>)
 8003d3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <pvPortMalloc+0x180>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d42:	e004      	b.n	8003d4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d903      	bls.n	8003d60 <pvPortMalloc+0xa4>
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f1      	bne.n	8003d44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <pvPortMalloc+0x174>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d04b      	beq.n	8003e02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2208      	movs	r2, #8
 8003d70:	4413      	add	r3, r2
 8003d72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad2      	subs	r2, r2, r3
 8003d84:	2308      	movs	r3, #8
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d91f      	bls.n	8003dcc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <pvPortMalloc+0xf8>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	613b      	str	r3, [r7, #16]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	1ad2      	subs	r2, r2, r3
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003dc6:	69b8      	ldr	r0, [r7, #24]
 8003dc8:	f000 f8f8 	bl	8003fbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <pvPortMalloc+0x17c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <pvPortMalloc+0x17c>)
 8003dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003dda:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <pvPortMalloc+0x17c>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <pvPortMalloc+0x184>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d203      	bcs.n	8003dee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <pvPortMalloc+0x17c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <pvPortMalloc+0x184>)
 8003dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <pvPortMalloc+0x178>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e02:	f7fe fd9d 	bl	8002940 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <pvPortMalloc+0x16a>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60fb      	str	r3, [r7, #12]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <pvPortMalloc+0x168>
	return pvReturn;
 8003e26:	69fb      	ldr	r3, [r7, #28]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3728      	adds	r7, #40	; 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	200019bc 	.word	0x200019bc
 8003e34:	200019c8 	.word	0x200019c8
 8003e38:	200019c0 	.word	0x200019c0
 8003e3c:	200019b4 	.word	0x200019b4
 8003e40:	200019c4 	.word	0x200019c4

08003e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d048      	beq.n	8003ee8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e56:	2308      	movs	r3, #8
 8003e58:	425b      	negs	r3, r3
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <vPortFree+0xac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <vPortFree+0x44>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60fb      	str	r3, [r7, #12]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <vPortFree+0x62>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60bb      	str	r3, [r7, #8]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <vPortFree+0xac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d019      	beq.n	8003ee8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d115      	bne.n	8003ee8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <vPortFree+0xac>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ecc:	f7fe fd2a 	bl	8002924 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <vPortFree+0xb0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <vPortFree+0xb0>)
 8003edc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ede:	6938      	ldr	r0, [r7, #16]
 8003ee0:	f000 f86c 	bl	8003fbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ee4:	f7fe fd2c 	bl	8002940 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ee8:	bf00      	nop
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200019c8 	.word	0x200019c8
 8003ef4:	200019c0 	.word	0x200019c0

08003ef8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003efe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <prvHeapInit+0xac>)
 8003f06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3307      	adds	r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <prvHeapInit+0xac>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f30:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <prvHeapInit+0xb0>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <prvHeapInit+0xb0>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4413      	add	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f44:	2208      	movs	r2, #8
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0307 	bic.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <prvHeapInit+0xb4>)
 8003f58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <prvHeapInit+0xb4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <prvHeapInit+0xb4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	1ad2      	subs	r2, r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <prvHeapInit+0xb4>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <prvHeapInit+0xb8>)
 8003f86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <prvHeapInit+0xbc>)
 8003f8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <prvHeapInit+0xc0>)
 8003f92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f96:	601a      	str	r2, [r3, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000db4 	.word	0x20000db4
 8003fa8:	200019b4 	.word	0x200019b4
 8003fac:	200019bc 	.word	0x200019bc
 8003fb0:	200019c4 	.word	0x200019c4
 8003fb4:	200019c0 	.word	0x200019c0
 8003fb8:	200019c8 	.word	0x200019c8

08003fbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <prvInsertBlockIntoFreeList+0xa8>)
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e002      	b.n	8003fd0 <prvInsertBlockIntoFreeList+0x14>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d8f7      	bhi.n	8003fca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d108      	bne.n	8003ffe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	441a      	add	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d118      	bne.n	8004044 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvInsertBlockIntoFreeList+0xac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d00d      	beq.n	800403a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	441a      	add	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e008      	b.n	800404c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <prvInsertBlockIntoFreeList+0xac>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e003      	b.n	800404c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d002      	beq.n	800405a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	200019b4 	.word	0x200019b4
 8004068:	200019bc 	.word	0x200019bc

0800406c <memset>:
 800406c:	4603      	mov	r3, r0
 800406e:	4402      	add	r2, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <__libc_init_array>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	2600      	movs	r6, #0
 8004080:	4d0c      	ldr	r5, [pc, #48]	; (80040b4 <__libc_init_array+0x38>)
 8004082:	4c0d      	ldr	r4, [pc, #52]	; (80040b8 <__libc_init_array+0x3c>)
 8004084:	1b64      	subs	r4, r4, r5
 8004086:	10a4      	asrs	r4, r4, #2
 8004088:	42a6      	cmp	r6, r4
 800408a:	d109      	bne.n	80040a0 <__libc_init_array+0x24>
 800408c:	f000 f828 	bl	80040e0 <_init>
 8004090:	2600      	movs	r6, #0
 8004092:	4d0a      	ldr	r5, [pc, #40]	; (80040bc <__libc_init_array+0x40>)
 8004094:	4c0a      	ldr	r4, [pc, #40]	; (80040c0 <__libc_init_array+0x44>)
 8004096:	1b64      	subs	r4, r4, r5
 8004098:	10a4      	asrs	r4, r4, #2
 800409a:	42a6      	cmp	r6, r4
 800409c:	d105      	bne.n	80040aa <__libc_init_array+0x2e>
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a4:	4798      	blx	r3
 80040a6:	3601      	adds	r6, #1
 80040a8:	e7ee      	b.n	8004088 <__libc_init_array+0xc>
 80040aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ae:	4798      	blx	r3
 80040b0:	3601      	adds	r6, #1
 80040b2:	e7f2      	b.n	800409a <__libc_init_array+0x1e>
 80040b4:	08004128 	.word	0x08004128
 80040b8:	08004128 	.word	0x08004128
 80040bc:	08004128 	.word	0x08004128
 80040c0:	0800412c 	.word	0x0800412c

080040c4 <memcpy>:
 80040c4:	440a      	add	r2, r1
 80040c6:	4291      	cmp	r1, r2
 80040c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040cc:	d100      	bne.n	80040d0 <memcpy+0xc>
 80040ce:	4770      	bx	lr
 80040d0:	b510      	push	{r4, lr}
 80040d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040d6:	4291      	cmp	r1, r2
 80040d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040dc:	d1f9      	bne.n	80040d2 <memcpy+0xe>
 80040de:	bd10      	pop	{r4, pc}

080040e0 <_init>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr

080040ec <_fini>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr
